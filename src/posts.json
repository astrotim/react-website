[{"id":3232,"date":"2017-05-02T21:58:29","date_gmt":"2017-05-02T11:58:29","guid":{"rendered":"http:\/\/astronautweb.co\/?p=3232"},"modified":"2017-05-02T22:01:36","modified_gmt":"2017-05-02T12:01:36","slug":"understanding-latency-web","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/understanding-latency-web\/","title":{"rendered":"Understanding Latency on the Web"},"content":{"rendered":"<h3>Definition<\/h3>\r\n\r\n<p>Latency is the amount of time it takes for a server to receive and process a request for a page object, such as a file. The amount of latency depends largely on how far away the client is from the server.<\/p>\r\n\r\n<h3>TCP and Window Size<\/h3>\r\n\r\n<p>TCP, the protocol underpinning the web, uses a process called \"acknowledgement\" on the client to let the server know the transmission is going OK. TCP starts off with a slow connection speed, or \"window size\" and attempts to establish a reliable connection before transfer speed can increase. It gradually increases the window size for each transmission, with most modern browsers having a starting window size of 14kB.<\/p>\r\n\r\n<p>If the connection incurs any problems, like dropped packets or time outs, the window size decreases again, which effectively amounts to an extra round trip to establish a reliable connection again. Once the connection is established, multiple HTTP requests can be opened, but it is the initial connection which is affected most by latency, as multiple round trips may be necessary to establish transmission reliability.<\/p>\r\n\r\n<h3>First Paint and CDNs<\/h3>\r\n\r\n<p>This is why many performance articles cite 14kB as an initial performance budget for rendering the \"first paint\", because it can significantly impact perceived performance. Theoretically, light travelling in an optic fibre takes about 170ms to loop around the world. Once you account for delays between network interfaces between such connections, it explains why latency times can run into the hundreds of milliseconds. Hence <em>where<\/em> you host your code is the controlling factor. Using a CDN which serves your content from a geographically closer origin will not only reduce the time it takes for data to transmit from source to destination, it will also mitigate the impact of extra round trips incurred in establishing connection reliability.<\/p>\r\n","protected":false},"excerpt":{"rendered":"<p>Latency is the amount of time it takes for a round trip to a server [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[167],"tags":[],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3232"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3232"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3232\/revisions"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3232"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3232"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3232"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3203,"date":"2017-04-13T20:30:00","date_gmt":"2017-04-13T10:30:00","guid":{"rendered":"http:\/\/astronautweb.co\/?p=3203"},"modified":"2017-04-13T22:06:20","modified_gmt":"2017-04-13T12:06:20","slug":"javascript-lexical-scope","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/javascript-lexical-scope\/","title":{"rendered":"What is Lexical Scope Anyway?"},"content":{"rendered":"<p>A relatively basic concept in JavaScript is that each declared function creates its own scope. What gets a little more mind bending is the concept of a closure - a function which is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<\/p>\r\n\r\n<p>Lexical scope is the scope model used by the JavaScript language, which differs to some other languages which use dynamic scope. Lexical scope is the scope defined at lexing time.<\/p>\r\n\r\n<h3>So, what is lexing time?<\/h3>\r\n<p>This digs into the mechanics of how JavaScript engine works. Despite commonly being referred to as an interpreted language, JavaScript compiles code immediately before executing it. For example the statement: <code>var a = 2;<\/code> is split into two separate steps at lexing time:<\/p>\r\n<ul>\r\n\t<li><code>var a<\/code> This declares the variable in the scope, before code execution.<\/li>\r\n\r\n\t<li><code>a = 2<\/code> This assigns the value 2 to the variable a, if it is found in the available scope.<\/li>\r\n<\/ul>\r\n\r\n<p>The lexing phase of compilation determines where and how all identifiers are declared, and thus how they will be looked up during execution. This is the same mechanism which results in \u201choisting\u201d variables. The variables are not actually moved within the source code, the declarations simply occur during the lexing phase and so the JavaScript engine is aware of these before execution.<\/p>\r\n\r\n<p>Consider these examples:<\/p>\r\n\r\n<p>Example 1:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nvar a = 1;\r\nconsole.log('a:', a); \/\/ a: 1\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 2:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nconsole.log('a:', a); \/\/ a: undefined\r\nvar a = 1;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 3:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nconsole.log('a:', a); \/\/ Uncaught ReferenceError: a is not defined\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 1 is straightforward and works as expected, however note the subtle difference between other two examples. Example 2 logs that the value of a is undefined, but the identifier a has itself been declared; compared with example 3 in which the identifier a has not been declared, hence resulting in a reference error.<\/p>\r\n\r\n<p>This demonstrates that during the lexing phase, the JavaScript engine declares the variables first, before the following step in which the values are assigned to the identifiers - this is hoisting. Because functions are also defined at this time (lexing phase), we can say that lexical scope is based on where variables and blocks of scope exist at author time, and thus are locked down at the end of the lexing phase. Scope is not defined at runtime, rather it can be accessed at runtime.<\/p>\r\n\r\n<p>Again, a closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction foo() {  \/\/ 'scope of foo' aka lexical scope for bar\r\n   var memory = 'hello closure';\r\n   return function bar() {\r\n      console.log(memory);\r\n   }\r\n}\r\n\r\n\/\/ returns the bar function and assigns it to the identifier 'closure&rsquo;;\r\nconst closure = foo();\r\n\r\nclosure(); \/\/ hello closure\r\n<\/pre>\n      <\/div>\r\n\r\n<p>So\u2026 lexical scope is the author-time scope created by a closure. It is the \u2018outer\u2019 scope of a function which is defined inside a closure.<\/p>\r\n\r\n<blockquote style=\"max-width: 650px\">function scope of outer function === lexical scope of inner function.<\/blockquote>","protected":false},"excerpt":{"rendered":"<p>A closure is a function which is able to remember and access its lexical scope [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[166],"tags":[],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3203"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3203"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3203\/revisions"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3203"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3203"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3203"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3187,"date":"2017-03-01T23:26:35","date_gmt":"2017-03-01T12:26:35","guid":{"rendered":"http:\/\/astronautweb.co\/?p=3187"},"modified":"2017-04-13T21:54:22","modified_gmt":"2017-04-13T11:54:22","slug":"flexbox-grid-system","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/flexbox-grid-system\/","title":{"rendered":"Flexbox Grid System"},"content":{"rendered":"<style>\r\n.dls-dl.-horizontal {\r\n    margin-bottom: 2rem;\r\n    display: flex;\r\n    flex-wrap: wrap\r\n}\r\n\r\n.dls-dl.-horizontal dt {\r\n    flex-basis: 10rem;\r\n    font-weight: 400;\r\n    padding-right: 1rem\r\n}\r\n\r\n.dls-dl.-horizontal dd {\r\n    flex-basis: calc(100% - 10rem)\r\n}\r\n\r\n.dl-modifier-list {\r\n    max-width: 34rem;\r\n    margin-bottom: 2rem\r\n}\r\n\r\n.dl-modifier-list dd:nth-child(2),.dl-modifier-list dt:nth-child(1) {\r\n    border-top: 1px solid #d5d5d5\r\n}\r\n\r\n.dl-modifier-list dd,.dl-modifier-list dt {\r\n    border-bottom: 1px solid #d5d5d5;\r\n    padding: .4rem .4rem .3rem .2rem\r\n}\r\n\r\n.dl-modifier-list dd {\r\n    margin-left: 0;\r\n    padding-left: 1rem\r\n}\r\n\r\n.dl-modifier-list.-row-modifiers dt {\r\n    flex-basis: 35%\r\n}\r\n\r\n.dl-modifier-list.-row-modifiers dd {\r\n    flex-basis: calc(65% - 1rem)\r\n}\r\n\r\n.dl-modifier-list.-col-modifiers {\r\n    max-width: 35rem\r\n}\r\n\r\n.dl-modifier-list.-col-modifiers dt {\r\n    flex-basis: 15rem\r\n}\r\n\r\n.dl-modifier-list.-col-modifiers dd {\r\n    flex-basis: calc(100% - 15rem)\r\n}\r\n<\/style>\r\n\r\n<p>Many developers are familiar with CSS grid systems such as Bootstrap, which are historically built using floats and percentage widths. Browser usage has now progressed such that Flexbox is well supported, so using a grid system based on Flexbox offers some key advantages over floats, including:\r\n\r\n<ul>\r\n\t<li>simpler syntax<\/li>\r\n\t<li>equal height columns<\/li>\r\n\t<li>reordering sibling content<\/li>\r\n<\/ul>\r\n\r\n<p>The v4 Bootstrap boasts a Flexbox grid, however this likely includes a lot of code bloat. I have recently tried my hand at writing a lightweight CSS grid with Flexbox which was surprisingly straightforward. This article will detail how this grid system works.\r\n\r\n<h2>Rows<\/h2>\r\n\r\n<p>The general structure is the same as traditional grids, with the parent row and child column structure, so we start with defining a row as a flex container.\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-left: -1rem;\r\n  margin-right: -1rem;\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>The second property enables row wrapping, which means that a single .row container can effectively become a multi-row layout. More on this later. We use negative margins on the left and right to offset the column padding, as per traditional grid systems.\r\n\r\n<h2>Columns<\/h2>\r\n\r\n<p>We define a base class for columns:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.col {\r\n  flex-grow: 1;\r\n  flex-basis: 100%;\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>We make the column fill the available space evenly with flex-grow: 1 and we make the column full width with flex-basis: 100%, effectively making it a single column layout by default.\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;div class=&quot;row&quot;&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n&lt;\/div&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p class='codepen'  data-height='232' data-theme-id='dark' data-slug-hash='KWVdNJ' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\ndark<\/p>\n<script async src=\"\/\/codepen.io\/assets\/embed\/ei.js\"><\/script>\r\n\r\n<h2>Simple Grid<\/h2>\r\n\r\n<p>Some use cases for a grid layout have uniform column widths, e.g. a three column grid having all columns at 33.3333% width. Instead having a class name of each individual column, we can apply the styles from a single class name at the row level.\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;div class=&ldquo;row -three-col-xs&quot;&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n  &lt;div class=&quot;col&quot;&gt;&lt;\/div&gt;\r\n&lt;\/div&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>We can create variants of these class names for different breakpoints:<\/p>\r\n\r\n<dl class=\"dls-dl -horizontal dl-modifier-list mb4\">\r\n  <dt><code>-two-col-xs<\/code><br> <code>-three-col-xs<\/code><br> <code>-four-col-xs<\/code><\/dt>\r\n  <dd>All widths<\/dd>\r\n  <dt><code>-two-col-sm<\/code><br> <code>-three-col-sm<\/code><br> <code>-four-col-sm<\/code><\/dt>\r\n  <dd>SM breakpoint and up<\/dd>\r\n  <dt><code>-two-col-md<\/code><br> <code>-three-col-md<\/code><br> <code>-four-col-md<\/code><\/dt>\r\n  <dd>MD breakpoint and up<\/dd>\r\n  <dt><code>-two-col-lg<\/code><br> <code>-three-col-lg<\/code><br> <code>-four-col-lg<\/code><\/dt>\r\n  <dd>LG breakpoint and up<\/dd>\r\n  <dt><code>-two-col-xl<\/code><br> <code>-three-col-xl<\/code><br> <code>-four-col-xl<\/code><\/dt>\r\n  <dd>XL breakpoint and up<\/dd>\r\n<\/dl>\r\n\r\n<p class='codepen'  data-height='112' data-theme-id='dark' data-slug-hash='zZrvWq' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href='http:\/\/codepen.io\/astrotim\/pen\/zZrvWq\/'>Flexbox Grid System - example 2<\/a> by Tim Holt (<a href='http:\/\/codepen.io\/astrotim'>@astrotim<\/a>) on <a href='http:\/\/codepen.io'>CodePen<\/a>.dark<\/p>\n<script async src=\"\/\/codepen.io\/assets\/embed\/ei.js\"><\/script>\r\n\r\n<h2>Complex Grid<\/h2>\r\n\r\n<p>Inevitably, you will need to control the widths of individual columns, which we do at the column level. Borrowing from the Bootstrap naming convention, we can use the following class names:\r\n\r\n<dl class=\"dls-dl -horizontal dl-modifier-list -col-modifiers mb4\">\r\n  <dt><code>-xs-3<\/code> <code>-sm-3<\/code> <code>-md-3<\/code><br> <code>-lg-3<\/code> <code>-xl-3<\/code><\/dt>\r\n  <dd>3 of 12 columns<\/dd>\r\n  <dt><code>-xs-4<\/code> <code>-sm-4<\/code> <code>-md-4<\/code><br> <code>-lg-4<\/code> <code>-xl-4<\/code><\/dt>\r\n  <dd>4 of 12 columns<\/dd>\r\n  <dt><code>-xs-6<\/code> <code>-sm-6<\/code> <code>-md-6<\/code><br> <code>-lg-6<\/code> <code>-xl-6<\/code><\/dt>\r\n  <dd>6 of 12 columns<\/dd>\r\n  <dt><code>-xs-8<\/code> <code>-sm-8<\/code> <code>-md-8<\/code><br> <code>-lg-8<\/code> <code>-xl-8<\/code><\/dt>\r\n  <dd>8 of 12 columns<\/dd>\r\n  <dt><code>-xs-9<\/code> <code>-sm-9<\/code> <code>-md-9<\/code><br> <code>-lg-9<\/code> <code>-xl-9<\/code><\/dt>\r\n  <dd>9 of 12 columns<\/dd>\r\n  <dt><code>-xs-12<\/code> <code>-sm-12<\/code> <code>-md-12<\/code><br> <code>-lg-12<\/code> <code>-xl-12<\/code><\/dt>\r\n  <dd>12 of 12 columns<\/dd>\r\n<\/dl>\r\n\r\n<h2>Visual position and source order<\/h2>\r\n\r\n<p>We can now leverage the order property of Flexbox to change the visual position of a column relative to its source order. This is particular useful for controlling the content order on mobile.\r\n\r\n<p>Consider a two column layout, with a main content area and a sidebar:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;div class=&ldquo;row&quot;&gt;\r\n  &lt;main class=&quot;col -md-9&quot;&gt;&lt;\/main&gt;\r\n  &lt;aside class=&quot;col -md-3&quot;&gt;&lt;\/aside&gt;\r\n&lt;\/div&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>We can display the sidebar on the left on larger screens using the order property:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@media (min-width: 800px) {\r\n  aside {\r\n  order: -1;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h2>Alignment<\/h2>\r\n\r\n<p>We can position columns using the property justify-content. For example, to centre align a single column, we can create a -centred class:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.-centred {\r\n  justify-content: center;\r\n}\r\n<\/pre>\n      <\/div>","protected":false},"excerpt":{"rendered":"<p>Flexbox is now well supported, so using a grid system based on Flexbox offers some [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[164],"tags":[],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3187"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3187"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3187\/revisions"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3187"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3187"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3187"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3177,"date":"2017-01-26T14:52:13","date_gmt":"2017-01-26T03:52:13","guid":{"rendered":"http:\/\/astronautweb.co\/?p=3177"},"modified":"2017-01-26T15:08:34","modified_gmt":"2017-01-26T04:08:34","slug":"writing-svg-can-sometimes-easy","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/writing-svg-can-sometimes-easy\/","title":{"rendered":"Writing SVG can sometimes be easy"},"content":{"rendered":"<p>With the ubiquity of high density displays, SVG has gained much popularity in recent years for its resolution independent rendering of UI elements such as icons and logos. I have been using SVG for some time, always using a vector program like Illustrator or Sketch to manage the shapes and then export the code. The output is often an indecipherable stream of letters and numbers which would be insane to attempt to edit manually. Not all SVG shapes are complex vector paths, however. For some simple use cases, hand coding SVG is surprisingly simple.<\/p>\r\n\r\n<p>Getting your hands dirty with writing SVG manually is a really good way to understand exactly how the shapes are rendered to the screen, which then becomes useful for efficiently implementing design or interaction features such as animating shapes.<\/p>\r\n\r\n<p>In this article, I will cover the basics of writing SVG by hand,  with examples of how the shape and attribute syntax can output simple UI shapes.<\/p>\r\n\r\n<h2>Shape syntax<\/h2>\r\n\r\n<p>Let's begin by looking at the six main SVG shapes:<\/p>\r\n\r\n<ul>\r\n\t<li>line<\/li>\r\n\t<li>rect<\/li>\r\n\t<li>circle<\/li>\r\n\t<li>path<\/li>\r\n\t<li>polyline<\/li>\r\n\t<li>polygon<\/li>\r\n<\/ul>\r\n\r\n<h3>Line<\/h3>\r\n\r\n<p>This syntax translates to \"draw a line from x1,y1 to x2,y2\" with the following attributes:<\/p>\r\n\r\n<dl>\r\n\t<dt>x1<\/dt>\r\n\t<dd>starting X pos<\/dd>\r\n\t<dt>y1<\/dt>\r\n\t<dd>starting Y pos<\/dd>\r\n\t<dt>x2<\/dt>\r\n\t<dd>ending X pos<\/dd>\r\n\t<dt>y2<\/dt>\r\n\t<dd>ending Y pos<\/dd>\r\n<\/dl>\r\n\r\n<h4>Example<\/h4>\r\n\r\n<p><code>&lt;line x1=\"0\" y1=\"25\" x2=\"100\" y2=\"75\"&gt;<\/code><\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<line x1=\"0\" y1=\"25\" x2=\"100\" y2=\"75\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h3>Rect<\/h3>\r\n\r\n<dl>\r\n\t<dt>x<\/dt>\r\n\t<dd>top left X pos<\/dd>\r\n\t<dt>y<\/dt>\r\n\t<dd>top left Y pos<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;rect x=\"30\" y=\"10\" width=\"40\" height=\"80\"\/&gt;<\/code>\r\ntranslates to \"draw a 40x80 rectangle with top left corner at pos 30,10\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<rect x=\"30\" y=\"10\" width=\"40\" height=\"80\"\/>\r\n<\/svg>\r\n\r\n<h2>Circle<\/h2>\r\n\r\n<dl>\r\n\t<dt>r<\/dt>\r\n\t<dd>radius<\/dd>\r\n\t<dt>cx<\/dt>\r\n\t<dd>centre X pos<\/dd>\r\n\t<dt>cy<\/dt>\r\n\t<dd>centre Y pos<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;circle r=\"50\" cx=\"50\" cy=\"50\"\/&gt;<\/code>\r\ntranslates to \"draw a circle of radius 50 with the centre at pos 50,50\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Path<\/h2>\r\n\r\n<dl>\r\n\t<dt>M<\/dt>\r\n\t<dd>move to<\/dd>\r\n\t<dt>H<\/dt>\r\n\t<dd>draw a horizontal line<\/dd>\r\n\t<dt>V<\/dt>\r\n\t<dd>draw a vertical line<\/dd>\r\n\t<dt>Z<\/dt>\r\n\t<dd>close the path<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;path d=\"M10 10 H 90 V 90 Z\"&gt;<\/code> translates to \"move to position 10,10; draw a horizontal line to pos 90,10; draw a vertical line to pos 90,90; draw a horizontal line to pos 10,90; close the path back to the starting point\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<path d=\"M10 10 H 90 V 90 Z\" stroke=\"black\" fill=\"transparent\"><\/path>\r\n<\/svg>\r\n\r\n<h2>Polyline<\/h2>\r\n\r\n<p><strong>points<\/strong> a list of X,Y positions<\/p>\r\n\r\n<p><code>&lt;polyline points=\"0 80, 20 20, 40 80, 50 5, 60 100, 80 50, 100 50\"\/&gt;<\/code> translates to \"draw connected lines between the points\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<polyline points=\"0 80, 20 20, 40 80, 50 5, 60 100, 80 50, 100 50\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Polygon<\/h2>\r\n\r\n<p>Same as polyline, with the path automatically closing to the first position.<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<polygon points=\"0 80, 20 20, 60 100, 100 30\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Attributes<\/h2>\r\n\r\n<p><code>viewBox<\/code> is the 'artboard' of the SVG file. A viewBox value of \"0 0 100 100\" translates to a 100x100 artboard with a top left position of 0,0.<\/p>\r\n\r\n<p><code>fill<\/code> sets the background colour and <code>stroke<\/code> sets the border colour of the shape.<\/p>\r\n\r\n<p><code>preserveAspectRatio=\"none\"<\/code> disables the default behaviour of an SVG maintaining the viewBox proportions when resized. This is useful for shapes that stretch in one dimension, such as a line.<\/p>\r\n\r\n<p><code>width<\/code> and <code>height<\/code> are optional attributes for defining size. It is useful to set a width to prevent an SVG from rendering full screen in the absence of CSS. Unlike the inline <code>style<\/code> attribute, these styles have very low specificity and can be easily overridden with CSS.<\/p>\r\n\r\n<p><code>&lt;use&gt;<\/code> is a child element for referencing an SVG defined elsewhere.<\/p>\r\n\r\n<p><code>xmlns=\"http:\/\/www.w3.org\/2000\/svg\"<\/code>  defines the XML namespace. This only necessary for SVG files and optional for inline SVG.<\/p>\r\n\r\n\r\n<h2>Common shapes<\/h2>\r\n\r\n<h3>Chevron<\/h3>\r\n\r\n<svg viewBox=\"0 0 50 100\" height=\"10rem\">\r\n\t<polyline points=\"0 0, 50 50, 0 100\" fill=\"none\" stroke=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Tooltip arrow<\/h3>\r\n\r\n<svg viewBox=\"0 0 100 50\" width=\"2rem\">\r\n\t<polygon points=\"0 0, 50 50, 100 0\" fill=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Decorative line<\/h3>\r\n\r\n<h4 class=\"title\">\r\n\t<svg viewBox=\"0 0 100 1\" preserveAspectRatio=\"none\">\r\n\t\t<line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"0\" fill=\"black\" stroke=\"black\" \/>\r\n\t<\/svg>\r\n\t<span>Some Text<\/span>\r\n\t<svg viewBox=\"0 0 100 1\" preserveAspectRatio=\"none\">\r\n\t\t<line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"0\" fill=\"black\" stroke=\"black\" \/>\r\n\t<\/svg>\r\n<\/h4>\r\n\r\n<h3>Arrow<\/h3>\r\n\r\n<svg viewBox=\"0 0 100 80\" width=\"10rem\">\r\n\t<polygon points=\"0 20,60 20,60 0,100 40,60 80,60 60,0 60\" fill=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Pie chart<\/h3>\r\n\r\n<p><code>&lt;circle r=\"16\" cx=\"16\" cy=\"16\"&gt;<\/code><\/p>\r\n\r\n<svg viewBox=\"0 0 32 32\" class=\"pie\" width=\"10rem\">\r\n\t<circle r=\"16\" cx=\"16\" cy=\"16\"\/>\r\n<\/svg>\r\n\r\n<h3>Curves<\/h3>\r\n\r\n<h4>Cubic bezier (C)<\/h4>\r\n\r\n<svg viewBox=\"0 0 60 30\" width=\"190\">\r\n\t<path d=\"M10 10 C 20 20, 40 20, 50 10\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<br \/>\r\n\r\n<svg width=\"190\" height=\"160\">\r\n  <path d=\"M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<h4>Quadratic bezier (Q)<\/h4>\r\n\r\n<svg width=\"190\" height=\"160\">\r\n  <path d=\"M10 80 Q 95 10 180 80\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<h2>Border image<\/h2>\r\n\r\n<p>Using SVG as a border image can allow for some visual effects that are difficult or impossible with the <code>border<\/code> or <code>box-shadow<\/code> properties, such as positioning a border on the center of a bounding box, rather than inside (border) or outside (box-shadow).<\/p>\r\n\r\n<div class=\"boxes\">\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n<\/div>\r\n\r\n<h2>Animating SVG<\/h2>\r\n\r\n<button id=\"animate\">Animate stuff<\/button>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 300 1\" width=\"30rem\" preserveAspectRatio=\"none\" class=\"animated-line\">\r\n\t<line x1=\"0\" y1=\"0\" x2=\"300\" y2=\"0\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 10 20\" width=\"1rem\" class=\"animated-chevron\">\r\n\t<path d=\"M0 0, L10 10, L0 20\" fill=\"none\" stroke=\"black\" \/>\r\n<\/svg>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 32 32\" class=\"pie animated-pie\" width=\"10rem\">\r\n\t<circle r=\"16\" cx=\"16\" cy=\"16\"\/>\r\n<\/svg>\r\n\r\n<style>\r\nsvg {\r\n  box-shadow: 0 0 0 1px rgba(199, 37, 78, 0.25);\r\n}\r\n\r\ncode {\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\ndl {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n}\r\n\r\ndt {\r\n  -ms-flex-preferred-size: 2.5rem;\r\n      flex-basis: 2.5rem;\r\n}\r\n\r\ndd {\r\n  -ms-flex-preferred-size: calc(100% - 2.5rem);\r\n      flex-basis: calc(100% - 2.5rem);\r\n}\r\n\r\n.title {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n}\r\n.title span {\r\n  padding: 0 .5rem;\r\n  white-space: nowrap;\r\n}\r\n.title svg {\r\n  width: 100%;\r\n  height: 1px;\r\n  box-shadow: none;\r\n}\r\n\r\n.pie {\r\n  background-color: aliceblue;\r\n  border-radius: 50%;\r\n  -webkit-transform: rotate(-90deg);\r\n          transform: rotate(-90deg);\r\n}\r\n.pie circle {\r\n  fill: none;\r\n  stroke: hotpink;\r\n  stroke-width: 32;\r\n  stroke-dasharray: 30 201;\r\n  -webkit-transition: all .2s ease-out;\r\n  transition: all .2s ease-out;\r\n}\r\n\r\n.animated-pie.-hide circle {\r\n  stroke-dasharray: 0 201;\r\n}\r\n\r\n.boxes {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n  max-width: 150px;\r\n}\r\n\r\n.box {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid transparent;\r\n  border-image-source: url(\"data:image\/svg+xml,%3Csvg xmlns%3D'http:\/\/www.w3.org\/2000\/svg' width%3D'3' height%3D'3' fill%3D'%23BFC0BF'%3E%3Crect x%3D'0' y%3D'0' width%3D'3' height%3D'3' \/%3E%3C\/svg%3E\");\r\n  border-image-slice: 1 1;\r\n  border-image-outset: .5;\r\n}\r\n\r\n.animated-chevron {\r\n  box-shadow: none;\r\n  display: inline-block;\r\n  width: 4rem;\r\n  stroke-width: -1px;\r\n  stroke-dasharray: 28.284, 20;\r\n  stroke-dashoffset: 0;\r\n  -webkit-transition: all .2s;\r\n  transition: all .2s;\r\n}\r\n\r\n.animated-chevron.-hide {\r\n  stroke-dasharray: 0, 20;\r\n  stroke-dashoffset: -13.642;\r\n}\r\n\r\n.animated-line {\r\n  box-shadow: none;\r\n  -webkit-transition: width .2s ease-out;\r\n  transition: width .2s ease-out;\r\n  width: 100%;\r\n  height: 1px;\r\n}\r\n.animated-line.-hide {\r\n  width: 0;\r\n}\r\n\r\n.animated-pie {\r\n  box-shadow: none;\r\n}\r\n.animated-pie circle {\r\n  stroke: #666;\r\n}\r\n<\/style>\r\n\r\n<script>\r\ndocument.getElementById('animate').addEventListener('click', function() {\r\n\tdocument.querySelector('.animated-chevron').classList.toggle('-hide');\r\n\tdocument.querySelector('.animated-line').classList.toggle('-hide');\r\n\tdocument.querySelector('.animated-pie').classList.toggle('-hide');\r\n});\r\n\r\ndocument.getElementById('animate-line').addEventListener('click', function() {\r\n});\r\n<\/script>\r\n\r\n\r\n\r\n","protected":false},"excerpt":{"rendered":"<p>Hand coding SVG is a good way to understand exactly how shapes are rendered to [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[16],"tags":[],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3177"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3177"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3177\/revisions"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3177"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3177"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3177"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3035,"date":"2014-02-11T22:43:48","date_gmt":"2014-02-11T11:43:48","guid":{"rendered":"http:\/\/astronautweb.co\/?p=3035"},"modified":"2014-06-05T11:49:50","modified_gmt":"2014-06-05T01:49:50","slug":"learning-javascript-future-of-the-web","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/learning-javascript-future-of-the-web\/","title":{"rendered":"Betting My Future on JavaScript"},"content":{"rendered":"<h3>Learning web development: an eternal work in progress<\/h3>\r\n\r\n<p>I remember using JavaScript years ago to hack together a random image box. It was a copy\/paste effort of cryptic nonsense but magically it worked. I was terrified of it and in no hurry to go back for more. HTML and CSS were fast becoming my best friends and I felt no need to disturb the peace with all this <code>var<\/code> weirdness.<\/p>\r\n\r\n<p>Then along came <a href=\"http:\/\/jquery.com\">jQuery<\/a> and websites en masse started to <code>slideDown<\/code>, <code>fadeOut <\/code>and <code>ajax<\/code> all kinds of coolness. Like many others, I learned enough to be dangerous without needing to dirty my hands with <em>real<\/em> JavaScript.<\/p>\r\n\r\n<p>These days, we have ourselves a new <strong>.js<\/strong> on the block just about every day. JavaScript is no longer only an interactivity layer for websites, it is what makes <a href=\"http:\/\/www.html5rocks.com\/en\/\">HTML5 a buzz word<\/a>, it is a server, it is a new framework each week and showing no signs of slowing down. jQuery is now a mature version 2.1 and used on <a href=\"http:\/\/w3techs.com\/technologies\/details\/js-jquery\/all\/all\">57.7% of all websites<\/a>, with the minimalist alternative, <a href=\"http:\/\/zeptojs.com\/\">Zepto.js<\/a>, following in its footsteps.<\/p>\r\n\r\n<p>It's now time to get out of my CSS comfort zone and invest in the future. After hearing about <a href=\"http:\/\/nodejs.org\/\">Node.js<\/a> for the past few years, I've now installed it on my two development machines, so I can now run a local web server without starting up Apache. I don't understand the first thing about Node, but I can now use it to compile my Sass and vendor prefix my production CSS, courtesy of task runner <a href=\"http:\/\/gruntjs.com\/\">Grunt.js<\/a>.<\/p>\r\n\r\n<p>I've starting experimenting with JS frameworks <a href=\"http:\/\/backbonejs.org\/\">Backbone.js<\/a> and <a href=\"http:\/\/angularjs.org\/\">Angular.js<\/a> which make PHP seem tired and old. <\/p> \r\n\r\n<p>XML always seemed nerdy and overcomplicated, but this is rapidly being superseded by JSON format, which has even found its way into my desktop code editor, <a href=\"http:\/\/www.sublimetext.com\/2\">Sublime Text 2<\/a> as the standard format for all configuration files. To render your JSON data, you've to choose from the many templating engines: <a href=\"http:\/\/handlebarsjs.com\/\">Handlebars<\/a>, <a href=\"http:\/\/underscorejs.org\/\">Underscore.js<\/a>, or for added performance: <a href=\"http:\/\/lodash.com\/\">Lo-Dash<\/a>.<\/p>\r\n\r\n<p>JavaScript is absolutely everywhere, and it won't be long until my Mum has heard of it. It is high time I started to <a href=\"http:\/\/jstherightway.org\/\">Learn JavaScript the Right Way<\/a> from the many online resources such as <a href=\"http:\/\/teamtreehouse.com\/library\/javascript-foundations\">Treehouse<\/a>, <a href=\"http:\/\/www.lynda.com\/JavaScript-tutorials\/practical-and-effective-javascript\/781-2.html\">Lynda.com<\/a> and <a href=\"http:\/\/www.codecademy.com\/tracks\/javascript\">Codeacademy<\/a> and the book, <a href=\"http:\/\/www.amazon.com\/JavaScript-Good-Parts-Douglas-Crockford\/dp\/0596517742\">JavaScript: the Good Parts<\/a><\/p>\r\n\r\n<h3>Code Snippets<\/h3>\r\n\r\n<ul>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/ajax-101\/\">Ajax 101<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-anonymous-function\/\">Self-invoking anonymous function<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-smooth-scrolling\/\" title=\"jQuery Smooth Scrolling\">jQuery Smooth Scrolling<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/ajax-jquery\/\" title=\"Ajax using jQuery\">Ajax with jQuery<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-javascript-comparison\/\" title=\"jQuery to Native JavaScript comparison\">jQuery to JavaScript Code Comparison<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>Reading List<\/h3>\r\n<ul>\r\n\t<li><a href=\"https:\/\/todaymade.com\/blog\/future-of-javascript\/\">The Future Of The World Is JavaScript<\/a><\/li>\r\n\t<li><a href=\"http:\/\/jstherightway.org\/\">JavaScript The Right Way<\/a><\/li>\r\n\t<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Introduction_to_Object-Oriented_JavaScript\">Introduction to Object-Oriented JavaScript<\/a><\/li>\r\n\t<li><a href=\"https:\/\/github.com\/rwaldron\/idiomatic.js\/\">Principles of Writing Consistent, Idiomatic JavaScript<\/a><\/li>\r\n\t<li><a href=\"http:\/\/toddmotto.com\/avoiding-anonymous-javascript-functions\/\">Avoiding anonymous JavaScript functions<\/a><\/li>\r\n<\/ul>\r\n\r\n<hr>","protected":false},"excerpt":{"rendered":"<p>Learning web development: an eternal work in progress I remember using JavaScript years ago to [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":3043,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[152],"tags":[165],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3035"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3035"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3035\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/3043"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3035"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3035"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3035"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2995,"date":"2014-01-04T23:40:25","date_gmt":"2014-01-04T12:40:25","guid":{"rendered":"http:\/\/astronautweb.co\/?p=2995"},"modified":"2014-01-05T08:59:12","modified_gmt":"2014-01-04T21:59:12","slug":"sass-web-development","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/sass-web-development\/","title":{"rendered":"7 Reasons to Use Sass"},"content":{"rendered":"<p>If you're not already on the <a href=\"http:\/\/sass-lang.com\/\" target=\"_blank\">Sass<\/a> bandwagon, here's seven reasons to help you make the transition.<\/p>\r\n\r\n<h3>Partial Files<\/h3>\r\n\r\n<p>Really long CSS files are painful. Before Sass, I used to try to devise ways to make it easier to jump around a CSS file, and I even used @import to pull in other CSS files, which is a performance no-no. Undoubtedly, the first feature of Sass to make my life easier is the use of partial files. By simply prepending a file name with an underscore, eg: <code>_header.scss<\/code>, and referencing the partial in your primary scss file, Sass will compile it into the primary css file without compiling it to an individual CSS file.<p>\r\n\r\n<p>Now we can break down our CSS into focused files to simplify code management with the comfort of knowing it will all compile into a single CSS file for the browser.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n\/\/ the following partials will compile into one CSS file\r\n@import 'globals';\r\n@import 'type';\r\n@import 'images';\r\n@import 'header';\r\n@import 'nav';\r\n@import 'page';\r\n@import 'footer';\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Nesting<\/h3>\r\n\r\n<p>If we're not careful, CSS can easily get out of hand with long selectors, especially when targeting multiple elements or classes inside a parent element. Sass allows us to nest selectors inside others, much like the nested structure of HTML, to make our code more readable and easier to maintain.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.parent {\r\n  display: block;\r\n\r\n  .child {\r\n    color: #fff;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Nesting vastly simplifies writing pseudo selectors by using the <code>&amp;<\/code> character to concatenate parent and pseudo selector, like:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\na {\r\n  color: #369;\r\n  text-decoration: none;\r\n\r\n  &amp;:hover {\r\n    color: #666; \r\n    text-decoration: underline;\r\n  }\r\n\r\n  &amp;:active {\r\n    outline: 0;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Nested Media Queries<\/h3>\r\n\r\n<p>Similarly, the management of rules targeted by media queries is vastly simplified with use of nested media queries. Once upon a time, I would have all the media queries one of more partial files, which invited the opportunity for human error.<p>\r\n\r\n<p>Now we can drop in our responsive styles right where it makes most sense, like this:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.box {\r\n  width: 33%;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    width: 100%;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Variables<\/h3>\r\n\r\n<p>The most obvious use of variables in Sass is for color management. By using <code>$light-blue<\/code> in our code, which references a predefined value like <code>$light-blue: #176BEC;<\/code>, it allows us to fine tune the color palette without needing to reach for the find &amp; replace command.<\/p>\r\n\r\n<p>Variables become exponentially more useful when combined with other Sass functions like <code>lighten($light-blue, 10%)<\/code> or math functions applied to numeric variables; for example calculating a ratio: <code>percentage($width\/$height);<\/code><\/p>\r\n\r\n<h3>Minification<\/h3>\r\n\r\n<p>When it's time for pushing our CSS to a production site, Sass will minify the code with a simple config option, removing all comments and whitespace. Now there's no excuse for having multiple bloated CSS files on a website, we combine all the partials into a single, minified CSS file.<\/p>\r\n\r\n<h3>The Bourbon Mixin Library<\/h3>\r\n\r\n<p>Mixins are awesome, but I'm going to skip right over the part about writing your own custom mixins and say that what is way more excellent is an extensive collection of mixins created by people much smarter than me.<\/p>\r\n\r\n<p><a href=\"http:\/\/bourbon.io\/\" target=\"_blank\">Bourbon<\/a> is wonderful Sass mixin library which I use on every project. Since Sass only compiles what I use, there is no performance concern about including a library of code that I may or may not use, unlike jQuery for example. Bourbon takes all the pain out of writing vendor prefixed code, such as a keyframe animation like:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@include keyframes(slideOpen) {\r\n  from {\r\n    @include transform(translateX(0));\r\n  }\r\n  to {\r\n    @include transform(translateX(240px));\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>The Bourbon docs are excellent, so take a look at all the other handy shortcuts it has to offer.<\/p> \r\n\r\n<h3>Bootstrap Sass<\/h3>\r\n\r\n<p>I couldn't write an article about CSS without mentioning Bootstrap. Although it is originally written in LESS, there are many ports of Bootstrap into Sass, such <a href=\"https:\/\/github.com\/twbs\/bootstrap-sass\">this one<\/a>. Much like Bourbon, we can include the Sass version of Bootstrap in our project to make all the mixins and partial files available. Rarely is there a need to use the entire Bootstrap framework, so instead we can call upon just the components we want to use, for example we can use just the typography and button styles like so:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@import 'bootstrap\/variables';\r\n@import 'bootstrap\/mixins';\r\n@import 'bootstrap\/type';\r\n@import 'bootstrap\/buttons';\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Alternatively, we can use the <code>@extend<\/code> directive to use Bootstrap styles with our own selectors, like:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.custom-button {\r\n  @extend .btn;\r\n  border-radius: 0;\r\n  border-width: 0 0 3px 0;\r\n}\r\n<\/pre>\n      <\/div>","protected":false},"excerpt":{"rendered":"<p>Sass is a total game changer for CSS development. It not only simplifies the code [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":3001,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[164],"tags":[149,150],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2995"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2995"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2995\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/3001"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2995"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2995"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2995"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2965,"date":"2013-11-12T21:00:52","date_gmt":"2013-11-12T10:00:52","guid":{"rendered":"http:\/\/astronautweb.co\/?p=2965"},"modified":"2014-01-05T20:06:46","modified_gmt":"2014-01-05T09:06:46","slug":"off-canvas-mobile-navigation","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/off-canvas-mobile-navigation\/","title":{"rendered":"Off-Canvas Mobile Navigation with CSS"},"content":{"rendered":"<h2 class=\"subheading\">A tutorial about how to create a mobile navigation component for a responsive website with a slide out animation<\/h2>\r\n\r\n<p>Commonly found in mobile apps, this UI component is an effective way of presenting a nav menu of small screens and can be easily implemented at a given breakpoint using media queries. We will use CSS for styling and animation and jQuery for adding\/removing classes to trigger the animations.<\/p>\r\n\r\n<div style=\"text-align:center; padding-bottom: 10px;\">\r\n<a target=\"_blank\" href=\"http:\/\/demo.astronautweb.co\/css\/off-canvas\/\" class=\"button\">View demo<\/a> &nbsp;&nbsp;\r\n<a target=\"_blank\" href=\"https:\/\/github.com\/astrotim\/off-canvas-mobile-nav\" class=\"button\">View on Github<\/a>\r\n<\/div>\r\n\r\n<p>All CSS in this tutorial is written in <a href=\"http:\/\/sass-lang.com\/\">SASS<\/a>. If you haven't yet made the switch to use a CSS preprocessor, I can't recommend it highly enough. If you really need to see the compiled CSS for this tutorial, see the <a href=\"https:\/\/github.com\/astrotim\/off-canvas-mobile-nav\/blob\/master\/css\/style.css\" target=\"_blank\">style.css file in the Github repo<\/a>.<\/p>\r\n\r\n<h3>Step One: the HTML<\/h3>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;body class=&quot;loading&quot;&gt;\r\n\r\n&lt;div class=&quot;wrapper&quot;&gt;\r\n&lt;div class=&quot;inner-wrapper&quot;&gt;\r\n\t\r\n\t&lt;header role=&quot;banner&quot;&gt;\r\n\t\t&lt;h1&gt;Title&lt;\/h1&gt;\r\n\t\t&lt;button id=&quot;nav-toggle&quot; aria-hidden=&quot;true&quot;&gt;Navigation&lt;\/button&gt;\r\n\r\n\t\t&lt;div class=&quot;nav-bg&quot;&gt;\r\n\t\t\t&lt;nav role=&quot;navigation&quot;&gt;\r\n\t\t\t\t&lt;ul&gt;\r\n\t\t\t\t\t&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Nav Item&lt;\/a&gt;&lt;\/li&gt;\r\n\t\t\t\t\t&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Nav Item&lt;\/a&gt;&lt;\/li&gt;\r\n\t\t\t\t\t&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Nav Item&lt;\/a&gt;&lt;\/li&gt;\r\n\t\t\t\t&lt;\/ul&gt;\r\n\t\t\t&lt;\/nav&gt;\r\n\t\t&lt;\/div&gt; &lt;!--.nav-bg--&gt;\r\n\t&lt;\/header&gt;\r\n\r\n\t&lt;div role=&quot;main&quot;&gt;\r\n\t\t&lt;!--content--&gt;\r\n\t&lt;\/div&gt; \r\n\r\n&lt;\/div&gt; &lt;!--.inner-wrapper--&gt;\r\n&lt;\/div&gt; &lt;!--.wrapper--&gt;\r\n\r\n&lt;script&gt;\r\n\/\/ jQuery goes here\r\n&lt;\/script&gt;\r\n\r\n&lt;\/body&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>We have two main content divs, <code>.wrapper<\/code> and <code>.inner-wrapper<\/code>. The outer <code>.wrapper<\/code> is what we will attach the slide animation to, while the <code>.inner-wrapper<\/code> allows us to hide the overflow content when the slide animation occurs.<\/p>\r\n\r\n<p>The <code>header<\/code> markup is typical, however we include a <code>button<\/code> which will be used to trigger the slide in\/slide out animation of the navigation.<\/p>\r\n\r\n<h3>Step Two: CSS for layout<\/h3>\r\n\r\n<p>We start with default layout and navigation style which will apply to the full size view of the site. Note the <code>.nav-open<\/code> class, which will be added by jQuery later in this tutorial.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n\/\/ SASS variables\r\n$darkGrey: #2c3e50;\r\n$darkerGrey: darken($darkGrey, 3%);\r\n\r\n.inner-wrapper {\r\n\tposition: relative;\r\n\toverflow-x: hidden;\r\n}\r\n\r\n.nav-open .inner-wrapper {\r\n\toverflow: hidden;\r\n}\r\n\r\nnav {\r\n\r\n\tul {\r\n\t\tfont-size: 0;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\tli {\r\n\t\t@include inline-block;\r\n\t\tlist-style: none;\r\n\r\n\t\ta {\r\n\t\t\tcolor: white;\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-size: 16px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tpadding: 10px 13px;\r\n\t\t}\r\n\r\n\t\ta:hover {\r\n\t\t\tbackground: $grey;\r\n\t\t}\r\n\r\n\t\ta:visited {\r\n\t\t\tcolor: white;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n#nav-toggle {\r\n\tdisplay: none;\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Three: CSS for Off-Canvas navigation<\/h3>\r\n\r\n<p>Next we add the mobile navigation style, nested inside a media query targeting a viewport width under 1024px. This includes the styling of the <code>&lt;button&gt;<\/code> element with a nav icon.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@media only screen and (max-width : 1023px) {\r\n\r\n.nav-bg {\r\n\tbackground: $darkerGrey;\r\n\twidth: $navWidth;\r\n\theight: 100%;\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\tleft: -$navWidth;\r\n}\r\n\r\n.nav-open .nav-bg {\r\n\toverflow-y: auto;\r\n}\r\n\r\n#nav-toggle {\r\n\tbackground-image: url(&quot;data:image\/svg+xml;charset=US-ASCII,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22utf-8%22%3F%3E%0A%3C%21--%20Generated%20by%20IcoMoon.io%20--%3E%0A%3C%21DOCTYPE%20svg%20PUBLIC%20%22-\/\/W3C\/\/DTD%20SVG%201.1\/\/EN%22%20%22http%3A\/\/www.w3.org\/Graphics\/SVG\/1.1\/DTD\/svg11.dtd%22%3E%0A%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A\/\/www.w3.org\/2000\/svg%22%20xmlns%3Axlink%3D%22http%3A\/\/www.w3.org\/1999\/xlink%22%20width%3D%2221%22%20height%3D%2224%22%20viewBox%3D%220%200%2021%2024%22%3E%0A%09%3Cpath%20d%3D%22M20.571%2018v1.714q0%200.348-0.254%200.603t-0.603%200.254h-18.857q-0.348%200-0.603-0.254t-0.254-0.603v-1.714q0-0.348%200.254-0.603t0.603-0.254h18.857q0.348%200%200.603%200.254t0.254%200.603zM20.571%2011.143v1.714q0%200.348-0.254%200.603t-0.603%200.254h-18.857q-0.348%200-0.603-0.254t-0.254-0.603v-1.714q0-0.348%200.254-0.603t0.603-0.254h18.857q0.348%200%200.603%200.254t0.254%200.603zM20.571%204.286v1.714q0%200.348-0.254%200.603t-0.603%200.254h-18.857q-0.348%200-0.603-0.254t-0.254-0.603v-1.714q0-0.348%200.254-0.603t0.603-0.254h18.857q0.348%200%200.603%200.254t0.254%200.603z%22%20fill%3D%22%23ffffff%22%20\/%3E%0A%3C\/svg%3E%0A&quot;);\r\n\tbackground-color: transparent;\r\n\tbackground-size: 24px 24px;\r\n\tdisplay: block;\r\n\twidth: 24px;\r\n\theight: 24px;\r\n\ttext-indent: -9999em;\r\n\tborder: none;\r\n\toutline: none;\r\n\tposition: absolute;\r\n\ttop: 20px;\r\n\tleft: 10px;\r\n\tcursor: pointer;\r\n}\r\n\r\nnav {\r\n\r\n\tul {\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\tli {\r\n\t\tdisplay: block;\r\n\r\n\t\ta {\r\n\t\t\tcolor: white;\r\n\t\t\tbackground: $darkGrey;\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-size: 16px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tpadding: 10px 13px;\r\n\t\t\tborder-top: 1px solid $grey;\r\n\t\t\tborder-bottom: 1px solid darken($darkGrey, 3%);\r\n\t\t}\r\n\r\n\t\ta:hover {\r\n\t\t\tbackground: $grey;\r\n\t\t}\r\n\t}\r\n\r\n    li:first-child a {\r\n\t\tborder-top: none;\r\n    }\t\r\n}\r\n\r\n} \/\/ end media query\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Four: the CSS3 animation<\/h3>\r\n\r\n<p>To create the slide in, slide out animation, we now add in the CSS3 keyframe animation. Using the <code>transform(translateX)<\/code> takes advantage of modern browsers' built-in hardware acceleration for a noticably smoother slide effect than if we used the <code>transition<\/code> property on <code>left<\/code> values.<\/p>\r\n\r\n<p>There are two keyframe animations defined; <code>slideOpen<\/code> is triggered when the <code>navopen<\/code> class is added and <code>slideClosed<\/code> is triggered when this class is removed. To prevent <code>slideClosed<\/code> from triggering on page load, we target the <code>loading<\/code> class (which is added to the <code>body<\/code> element in the markup) and reset the animation to none.<p>\r\n\r\n<p class=\"note\">Note: The syntax below uses mixins from the <a href=\"http:\/\/bourbon.io\/\" target=\"_blank\">Bourbon library<\/a>, which takes care of all the vendor prefixes.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@include keyframes(slideOpen) {\r\n\tfrom {\r\n\t\t@include transform(translateX(0));\r\n\t}\r\n\tto {\r\n\t\t@include transform(translateX($navWidth));\r\n\t}\r\n}\r\n\r\n@include keyframes(slideClosed) {\r\n\tfrom {\r\n\t\t@include transform(translateX($navWidth));\r\n\t}\r\n\tto {\r\n\t\t@include transform(translateX(0));\r\n\t}\r\n}\r\n\r\n.nav-open .wrapper {\r\n\t@include animation-name(slideOpen);\r\n\t@include animation-duration(.3s);\r\n\t@include animation-timing-function(ease-out);\r\n\t@include animation-fill-mode(forwards);\r\n\t@include prefixer(backface-visibility, hidden, webkit moz spec);\r\n}\r\n\r\n.wrapper {\r\n\t@include animation-name(slideClosed);\r\n\t@include animation-duration(.2s);\r\n\t@include animation-timing-function(ease-in);\r\n\t@include animation-fill-mode(forwards);\r\n\t@include prefixer(backface-visibility, hidden, webkit moz o spec);\r\n}\r\n\r\n.loading .wrapper {\r\n\t@include animation(none);\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Five: the jQuery<\/h3>\r\n\r\n<p>Last we add the jQuery to facilitate the adding and removing of CSS classes. We start by setting up some variables for the <code>body<\/code> and <code>.wrapper<\/code> elements, the <code>button<\/code> and also storing the height of the viewport upon page load.<\/p>\r\n\r\n<p>When the button is tapped, the <code>loading<\/code> class is removed and the <code>nav-open<\/code> class is added. Each subsequent button tap will toggle <code>nav-open<\/code>. If nav-open is applied, the page has the height set to the current viewport height, which, combined with the <code>overflow-y: hidden<\/code> property in the CSS, will prevent scrolling of the page when the navigation is open.<\/p>\r\n\r\n<p>Additionally, we add a click event to the <code>&lt;div role=\"main\"&gt;<\/code> which closes the nav.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nvar body = $('body'),\r\n\tpage = body.find('.wrapper'),\r\n\tnavToggle = body.find('#nav-toggle'),\r\n\tviewportHt = $(window).innerHeight();\r\n\r\nnavToggle.on('click', function(){\r\n\t\r\n\tbody\r\n\t\t.removeClass('loading')\r\n\t\t.toggleClass('nav-open');\r\n\r\n\tif ( body.hasClass('nav-open') ) {\r\n\t\tpage.css('height', viewportHt);\r\n\t} else {\r\n\t\tpage.css('height', 'auto');\r\n\t}\t\r\n\r\n});\r\n\r\npage.find('[role=&quot;main&quot;]').on('click', function(e){\r\n\tbody.removeClass('nav-open');\r\n\te.preventDefault();\r\n});\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Six: Internet Explorer support<\/h3>\r\n\r\n<p>We couldn't have a nice UI pattern without needing an IE hack, could we? Thanks to <a href=\"http:\/\/astronautweb.co\/2013\/11\/off-canvas-mobile-navigation\/#comment-295711\">Vlad's comment below<\/a> which pointed out a failure to work in IE10, I have added this section with a fallback to support IE10 &amp; IE11.<\/p>\r\n\r\n<p>Firstly, we need to target IE. Conditional comments are gone as of IE10, but we can use a media query to achieve the same thing. Credit to <a href=\"https:\/\/gist.github.com\/atk\/4025104\" target=\"_blank\">Alex Kloss<\/a> and <a href=\"http:\/\/blog.keithclark.co.uk\/moving-ie-specific-css-into-media-blocks\/\" target=\"_blank\">Keith Clark<\/a> for this snippet:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width:0\\0) {\r\n  \/\/ next, we'll add the IE styles here\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Although keyframe animations are supported in IE10\/11, for some reason I am yet to debug, the animation in this tutorial still fails. However, we can still make the open\/close action work without animation using transform\/translateX, as follows:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) and (min-width:0\\0) {\r\n\r\n  $navWidth: 240px;\r\n\r\n  .nav-open .nav-bg {\r\n  \tleft: 0;\r\n  }\r\n\r\n  .wrapper,\r\n  .nav-open .wrapper {\r\n  \t@include animation(none);\r\n  }\r\n\r\n  .nav-open .wrapper {\r\n  \t@include transform(translateX($navWidth));\r\n  }\r\n\r\n  .wrapper {\r\n  \t@include transform(translateX(0));\r\n  }\r\n\r\n}\r\n<\/pre>\n      <\/div> \r\n\r\n<p>I've found that the left position behaves differently in IE, so this has also been adjusted to make the menu usable.<\/p> \r\n\r\n<div style=\"text-align:center; padding-bottom: 10px;\">\r\n<a target=\"_blank\" href=\"http:\/\/demo.astronautweb.co\/css\/off-canvas\/\" class=\"button\">View demo<\/a> &nbsp;&nbsp;\r\n<a target=\"_blank\" href=\"https:\/\/github.com\/astrotim\/off-canvas-mobile-nav\" class=\"button\">View on Github<\/a>\r\n<\/div>","protected":false},"excerpt":{"rendered":"<p>A tutorial about how to create a mobile navigation component for a responsive website with [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2981,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[93,94],"tags":[146,147,145,148],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2965"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2965"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2965\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/2981"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2965"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2965"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2965"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2913,"date":"2013-09-25T18:46:59","date_gmt":"2013-09-25T08:46:59","guid":{"rendered":"http:\/\/astronautweb.co\/?post_type=snippet&#038;p=2913"},"modified":"2014-06-05T11:50:51","modified_gmt":"2014-06-05T01:50:51","slug":"google-snippet-profile-photo","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/google-snippet-profile-photo\/","title":{"rendered":"Photo not showing in Google snippet? Could be the photo."},"content":{"rendered":"<p>Have you followed all the steps for Google Authorship on your blog but your profile photo still does not appear in the search result snippet? It could be the image itself that is to blame.<\/p>\r\n\r\n<p>After waiting almost a year and still not seeing my profile pic appear in Google search results, despite it apparently working fine in the <a href=\"http:\/\/www.google.com\/webmasters\/tools\/richsnippets\" target=\"_blank\">Google Structured Data Testing Tool<\/a>, I read on this post that it could be the fault of the photo itself.<\/p>\r\n\r\n<div class=\"group\">\r\n<div style=\"font-size: 10px; margin-left: 15%;\"><div id=\"attachment_2914\" style=\"width: 130px\" class=\"wp-caption alignleft\"><img src=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2012-04-filtered.jpg\" alt=\"Google profile photos can be rejected if you are wearing sunglasses or if the photo is too filtered\" width=\"100\" height=\"100\" class=\"size-full wp-image-2914\" srcset=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2012-04-filtered.jpg 223w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2012-04-filtered-150x150.jpg 150w\" sizes=\"(max-width: 100px) 100vw, 100px\" \/><p class=\"wp-caption-text\">My profile photo that never showed up<\/p><\/div><\/div>\r\n<div style=\"font-size: 10px; margin-right: 15%;\"><div id=\"attachment_2915\" style=\"width: 130px\" class=\"wp-caption alignright\"><img src=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2013-09.jpg\" alt=\"Approved Google profile photo\" width=\"100\" height=\"100\" class=\"size-full wp-image-2915\" style=\"margin-right: 10%\" srcset=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2013-09.jpg 322w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2013-09-252x252.jpg 252w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/09\/2013-09-150x150.jpg 150w\" sizes=\"(max-width: 100px) 100vw, 100px\" \/><p class=\"wp-caption-text\">This one now appears in search results<\/p><\/div>\r\n<\/div><\/div>\r\n\r\n<p>Apparently, your photo can be suppressed if you are <strong>wearing sunglasses<\/strong> or if the <strong>image is filtered<\/strong> too much, amongst other things. Obviously I was guilty on two counts. Two days after updating my photo to one without filtering or sunglasses, it started appearing in search results.<\/p>","protected":false},"excerpt":{"rendered":"<p>Have you followed all the steps for Google Authorship on your blog but your profile [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2932,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[33],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2913"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2913"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2913\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/2932"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2913"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2913"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2913"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2886,"date":"2013-08-30T00:01:07","date_gmt":"2013-08-29T14:01:07","guid":{"rendered":"http:\/\/astronautweb.co\/?p=2886"},"modified":"2014-01-17T12:41:42","modified_gmt":"2014-01-17T01:41:42","slug":"wordpress-shortlist-feature","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/wordpress-shortlist-feature\/","title":{"rendered":"&#8220;Add to Shortlist&#8221; feature for WordPress"},"content":{"rendered":"<h2 class=\"subheading\">A tutorial about how to build an 'Add to Shortlist' feature in WordPress using Ajax<\/h2>\r\n\r\n<div style=\"text-align:center; padding-bottom: 10px;\">\r\n<a class=\"button\" href=\"http:\/\/demo.astronautweb.co\/shortlist-demo\/\" target=\"_blank\">View demo<\/a> &nbsp;&nbsp;\r\n<a class=\"button\" href=\"https:\/\/github.com\/astrotim\/shortlist-wordpress\" target=\"_blank\">Clone from Github<\/a>\r\n<\/div>\r\n\r\n<p>There are endless options for adding a shopping cart to a website, but sometimes we're not dealing with products for sale and we need something more simplified. This article will take you step-by-step through building a simple shortlist feature in WordPress.<\/p>\r\n\r\n<h3>Step One: WordPress Template Files<\/h3>\r\n\r\n<p>We'll assume that we are using the default posts in WordPress to represent the items which can be selected. We will also use Bootstrap 3 for styling the appearance of this demo.<\/p>\r\n\r\n<p>Create two pages in the WordPress admin: 'All Items' and 'Shortlist'. Create two WordPress template files called <code>items.php<\/code> and <code>shortlist.php<\/code> and then assign each page to their respective template files.<\/p>\r\n\r\n<h4>items.php<\/h4>\r\n\r\n<p>Add a basic loop to the <code>items.php<\/code> template file to output all the posts as an unordered list, with each item including three buttons: add, remove and selected. Assuming we're familiar with the WordPress loop, the code inside the <code>while()<\/code> statement is:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n&lt;li id=&quot;&lt;?php the_ID(); ?&gt;&quot; class=&quot;item&quot;&gt;\r\n\t&lt;img src=&quot;http:\/\/placehold.it\/180x120\/f0f7fd\/428bca&amp;text=&lt;?php the_title(); ?&gt;&quot; alt=&quot;&quot;&gt;\t\t\t\t\t\t\r\n\t&lt;a href=&quot;#&quot; class=&quot;btn action add&quot; data-action=&quot;add&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus-sign&quot;&gt;&lt;\/span&gt; Add&lt;\/a&gt;\r\n\t&lt;a href=&quot;#&quot; class=&quot;btn action remove&quot; data-action=&quot;remove&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-minus-sign&quot;&gt;&lt;\/span&gt; Remove&lt;\/a&gt;\r\n\t&lt;a href=&quot;#&quot; class=&quot;btn selected&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-ok-sign&quot;&gt;&lt;\/span&gt; &lt;\/a&gt;\r\n&lt;\/li&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Note the <code>data-action<\/code> attribute on the add and remove buttons. This will be utilised in another step below.<\/p>\r\n\r\n<h4>shortlist.php<\/h4>\r\n\r\n<p>The loop in shortlist.php is similar, however we can just include one button: remove. We will add to this template later, once the shortlist functions have been created.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n&lt;li id=&quot;&lt;?php the_ID(); ?&gt;&quot; class=&quot;item&quot;&gt;\r\n\t&lt;img src=&quot;http:\/\/placehold.it\/180x120\/f0f7fd\/428bca&amp;text=&lt;?php the_title(); ?&gt;&quot; alt=&quot;&quot;&gt;\t\t\t\t\t\t\r\n\t&lt;a href=&quot;#&quot; class=&quot;btn action remove&quot; data-action=&quot;remove&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-minus-sign&quot;&gt;&lt;\/span&gt; Remove&lt;\/a&gt;\r\n&lt;\/li&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Two: Shortlist Functions<\/h3>\r\n\r\n<p>Create an \/includes\/ directory and the file <code>shortlist-functions.php<\/code> within. This file will contain our custom functions.<\/p>\r\n\r\n<p>Start the session, if not already started:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nfunction shortlist_start_session() {\r\n    if(!session_id()) {\r\n        session_start();\r\n    }\r\n}\r\nadd_action('init', 'shortlist_start_session', 1);\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Count the number of items in the session:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nfunction list_count() {\r\n\tif(isset($_SESSION['shortlist'])) {\r\n\t\techo count($_SESSION['shortlist']);\r\n\t} else {\r\n\t\techo '0';\r\n\t}\t\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Create the file shortlist.js within a \/js\/ directory and enqueue it in the theme:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nfunction custom_enqueue_scripts() {\r\n\tif (!is_admin()) {\r\n\t\twp_enqueue_script(\r\n\t\t\t'shortlist', \/\/ handle\t\r\n\t\t\tget_bloginfo('template_directory') . '\/js\/shortlist.js', \/\/ path\r\n\t\t\tarray('jquery'), \/\/ dependency\r\n\t\t\t'1', \t\/\/ version\r\n\t\t\ttrue \/\/ load via wp_footer\r\n\t\t);\r\n\t}\r\n}\r\nadd_action('wp_enqueue_scripts', 'custom_enqueue_scripts');\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Plus, we'll create a debug function which we can use to view the contents of the session array if necessary for debugging.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nfunction debug_shortlist() {\r\n\techo '&lt;br&gt;&lt;pre class=&quot;entry-content&quot;&gt;';\r\n\tif(!empty($_SESSION['shortlist'])) {\r\n\t\tprint_r($_SESSION['shortlist']);\r\n\t} else {\r\n\t\techo 'Session is empty.';\r\n\t}\t\r\n\techo '&lt;\/pre&gt;';\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Lastly, we need to include the custom functions file in the theme's main <code>functions.php<\/code> file with the following hook:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nif ( ! function_exists('custom_functions') ) {\r\n    function custom_functions() {\r\n\tinclude(get_template_directory() . '\/includes\/shortlist-functions.php');\r\n    }\r\n}\r\n\/\/ runs before 'init' hook\r\nadd_action( 'after_setup_theme', 'custom_functions' );\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Two: Shortlist Actions &amp; Shortlist Total<\/h3>\r\n\r\n<p>Inside the \/includes\/ directory, we create the <code>shortlist-actions.php<\/code> file, for updating the contents of the session_array. This file will be called via AJAX from a JavaScript file.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n\/\/start the session, if not already running\r\nif(!session_id()) {\r\n    session_start();\r\n}\r\n\t    \r\n\/\/ define a fallback value for an shortlist session\r\nif(!isset($_SESSION['shortlist'])) {\r\n\t$_SESSION['shortlist'] = array();\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Since we're calling this file via AJAX, we need to extract the <code>action<\/code> and <code>id<\/code> values from the query string, as follows:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n\/\/ define variable defaults\r\n$action = null;\r\n$id = 0;\r\n\r\n\/\/ assign action and id parameters if set\r\nif ( isset( $_GET['action'] ) &amp;&amp; !empty( $_GET['action'] ) ) {\r\n\t\/\/the action from the URL \r\n\t$action = $_GET['action']; \r\n} \r\nif ( isset( $_GET['id'] ) &amp;&amp; !empty( $_GET['id'] ) ) {\r\n\t\/\/the item id from the URL \r\n\t$id = $_GET['id']; \r\n} \r\n<\/pre>\n      <\/div>\r\n\r\n<p>According to the $action value; add to, or remove from, the $id from the session using the follwing switch statement:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\nswitch($action) {\t\r\n\r\n\tcase &quot;add&quot;:\r\n\t\t\/\/ check if item is already in array, if not, add\r\n\t\tif(($key = array_search($id, $_SESSION['shortlist'])) === false) {\r\n\t\t\tarray_push( $_SESSION['shortlist'], $id );\r\n\t\t}\r\n\tbreak;\r\n\t\r\n\tcase &quot;remove&quot;:\r\n\t\t\/\/ search for item by value and remove if found\r\n\t\tif(($key = array_search($id, $_SESSION['shortlist'])) !== false) {\r\n\t\t    unset($_SESSION['shortlist'][$key]);\r\n\t\t}\r\n\tbreak;\r\n\t\r\n\tcase &quot;empty&quot;:\r\n\t\t\/\/remove all\r\n\t\tunset($_SESSION['shortlist']); \r\n\tbreak;\r\n\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Create a third file within the \/includes\/ directory called <code>shortlist-total.php<\/code> This file will be only used to update the list counter, and it contains the following function:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n\/\/start the session\r\nif(!session_id()) {\r\n    session_start();\r\n}\r\n\r\nif(isset($_SESSION['shortlist'])) {\r\n\techo count($_SESSION['shortlist']);\r\n} else {\r\n\techo '0';\r\n}\t\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Three: the JavaScript<\/h3>\r\n\r\n<p class=\"note\">The functions below include <code>console.log()<\/code> messages to help with debugging. This breaks Ajax in older IE, so you can either remove the <code>console.log<\/code> code or use the <code>log()<\/code> function by Paul Irish. <a href=\"https:\/\/github.com\/astrotim\/shortlist-wordpress\/blob\/master\/js\/shortlist.js\">More details here<\/a><\/p>\r\n\r\n<p>Define the path to the \/includes\/ directory, relative to the WordPress theme. Note the snippet below is for a theme within a directory \/shortlist-wordpress\/<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\n\/\/ theme directory name\r\nvar themeDirName = 'shortlist-wordpress';\r\n\r\n\/\/ path to ajax file\r\nvar homeURL = window.location.protocol + &quot;\/\/&quot; + window.location.host + &quot;\/&quot;,\r\n    filePath = homeURL + 'wp-content\/themes\/' + themeDirName + '\/includes\/';\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Append a counter span to the navigation item ending in \/shortlist\/, and set the value of the counter to that of the data-count attribute on the body element. Note: this value is set in PHP on page load.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nvar shortlistNavItem = $('.navbar li a[href$=&quot;\/shortlist\/&quot;]'),\r\n    listCount = $('body').data('count');\r\n\r\nshortlistNavItem.append('&amp;nbsp;(&lt;span class=&quot;shortlist-count&quot;&gt;0&lt;\/span&gt;)');\r\n\r\n$('.shortlist-count').html(listCount);\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Now we create the <code>getItemTotal<\/code> function which updates counter dynamically.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction getItemTotal() {\r\n\tvar\tcounter = $('.shortlist-count'),\r\n\t\tclearAll = $('.shortlist-clear a');\r\n\r\n\t$.ajax({\r\n\t\ttype: 'GET',\r\n\t\turl: filePath + 'shortlist-total.php',\r\n\t\tsuccess: function(data) {\r\n\t\t\tcounter.text(data);\r\n\t\t},\r\n\t\terror: function() {\r\n\t\t\tconsole.log('error with getItemTotal function');\r\n\t\t}\t\t\t\r\n\t});\r\n};\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Next we create the <code>shortlistActions<\/code> function which runs the shortlist-actions.php when an add or remove button is clicked.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction shortlistActions(button) {\r\n\r\n\t$(button).on('click', function(e) {\r\n\r\n\t\tvar target \t\t= $(this),\r\n\t\t\titem \t\t= target.closest('.item'),\r\n\t\t\titemID \t\t= item.attr('id'),\r\n\t\t\titemAction \t= target.data('action');\r\n\r\n\t\t$.ajax({\r\n\t\t\ttype: 'GET',\r\n\t\t\turl: filePath + 'shortlist-actions.php',\r\n\t\t\tdata: 'action=' + itemAction + '&amp;id=' + itemID,\r\n\t\t\tsuccess: function() {\r\n\t\t\t\tgetItemTotal();\r\n\t\t\t\tconsole.log(itemAction + ' item ' + itemID);\r\n\t\t\t},\r\n\t\t\terror: function() {\r\n\t\t\t\tconsole.log('error with shortlistActions function');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (itemAction === 'remove') {\r\n\t\t\titem.removeClass('selected');\r\n\t\t} else {\r\n\t\t\titem.addClass('selected');\r\n\t\t}\r\n\r\n\t\te.preventDefault();\r\n\t});\r\n\r\n};\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Call immediately on any item, except those on the Shortlist page.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nshortlistActions( $('.item .action:not(.page-template-shortlist-php .item .action)') );\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Next we create a remove only function and call it immediately.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction shortlistPageActions() {\r\n\r\n\tvar shortlistPage \t\t= $('.page-template-shortlist-php'),\r\n\t\tshortlistPageItem \t= shortlistPage.find('.item'),\r\n\t\tremoveItem \t\t\t= shortlistPageItem.find('.action');\r\n\r\n\tremoveItem.on('click', function(e) {\r\n\r\n\t\tvar target = $(this),\r\n\t\t\titemID = target.closest('.item').attr('id');\r\n\r\n\t\t$.ajax({\r\n\t\t\ttype: 'GET',\r\n\t\t\turl: filePath + 'shortlist-actions.php',\r\n\t\t\tdata: 'action=remove&amp;id=' + itemID,\r\n\t\t\tsuccess: function() {\r\n\t\t\t\tgetItemTotal();\r\n\t\t\t\tconsole.log('removed item ' + itemID);\r\n\t\t\t},\r\n\t\t\terror: function() {\r\n\t\t\t\tconsole.log('error with removeItem action');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttarget.closest('.item').remove();\r\n\r\n\t\te.preventDefault();\r\n\t});\r\n\r\n};\r\n\r\n\/\/ call immediately\r\nshortlistPageActions();\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Create a function for clearing all the items from the shortlist session.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction clearAll() {\r\n\t\r\n\t$('.shortlist-clear a').on('click', function(e) {\r\n\r\n\t\t$.ajax({\r\n\t\t\ttype: 'GET',\r\n\t\t\turl: filePath + 'shortlist-actions.php',\r\n\t\t\tdata: 'action=empty',\r\n\t\t\tsuccess: function() {\r\n\t\t\t\tgetItemTotal();\r\n\t\t\t},\r\n\t\t\terror: function() {\r\n\t\t\t\tconsole.log('error with clearAll action');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\te.preventDefault();\t\t\r\n\t});\r\n} \/\/ end \r\n\r\nclearAll();\r\n<\/pre>\n      <\/div>","protected":false},"excerpt":{"rendered":"<p>There are endless options for adding a shopping cart to a website, but sometimes we&#8217;re [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2903,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[16,155],"tags":[],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2886"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2886"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2886\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/2903"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2886"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2886"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2886"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2735,"date":"2013-05-26T09:40:01","date_gmt":"2013-05-25T23:40:01","guid":{"rendered":"http:\/\/astronautweb.co\/?p=2735"},"modified":"2013-10-08T23:29:05","modified_gmt":"2013-10-08T12:29:05","slug":"wordpress-flexslider-advanced-custom-fields","status":"publish","type":"post","link":"http:\/\/astronautweb.co\/wordpress-flexslider-advanced-custom-fields\/","title":{"rendered":"Content Slider with Flexslider, WordPress &#038; Advanced Custom Fields"},"content":{"rendered":"<h2 class=\"subheading\">A tutorial about how to create a slider with images and text content in WordPress using the Advanced Custom Fields plugin<\/h2>\r\n\r\n<p><a href=\"http:\/\/advancedcustomfields.com\/\" target=\"_blank\">Advanced Custom Fields<\/a> is a brilliant plugin for WordPress which can be put to so many different uses; this article will take you through using the Repeater Field add to build a slider in which each slide has a background image and a content section with a heading and a text area. Note that while the ACF plugin is free for the base version, the Repeater Field add-on will cost you $25 AUD for use on unlimited sites. <\/p>\r\n\r\n<h3>Step One: build the slider markup<\/h3>\r\n\r\n<p>As usual, we'll start by building a single page mockup with just the slider, so we know that it's all working properly before integrating the WordPress components. Head over to the Flexslider site and download a copy of the plugin. Their site has really good instructions for getting this setup, so I won't go into too much detail about it here.<\/p>\r\n\r\n<p style=\"text-align: center;\"><a class=\"button\" href=\"http:\/\/demo.astronautweb.co\/slider\/with-content\/index.html\" target=\"_blank\">View Slider with text content demo page<\/a><\/p>\r\n\r\n<p>Create a basic HTML file in your development environment with the sample markup inside the body of your document:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;div class=&quot;flexslider&quot;&gt;\r\n  &lt;ul class=&quot;slides&quot;&gt;\r\n    &lt;li style=&quot;background-image: url(images\/01.jpg);&quot;&gt;\r\n      &lt;div class=&quot;slide-text&quot;&gt;\r\n      &lt;h2&gt;Heading&lt;\/h2&gt;\r\n      &lt;p&gt;Lorem ipsum ex qui aliqua...&lt;\/p&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/li&gt;\r\n    &lt;li style=&quot;background-image: url(images\/02.jpg);&quot;&gt;\r\n      &lt;div class=&quot;slide-text&quot;&gt;\r\n      &lt;h2&gt;Heading&lt;\/h2&gt;\r\n      &lt;p&gt;Pariatur esse mollit ...&lt;\/p&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/li&gt;\r\n    &lt;li style=&quot;background-image: url(images\/03.jpg);&quot;&gt;\r\n      &lt;div class=&quot;slide-text&quot;&gt;\r\n      &lt;h2&gt;Heading&lt;\/h2&gt;\r\n      &lt;p&gt;uis qui aute enim aliquip ...&lt;\/p&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/li&gt;\r\n  &lt;\/ul&gt;\r\n&lt;\/div&gt;&lt;!-- .flexslider --&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Add the three essential CSS & JS files in your page:<\/em>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;link rel=&quot;stylesheet&quot; href=&quot;css\/flexslider.css&quot; type=&quot;text\/css&quot;&gt;\r\n&lt;script src=&quot;https:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1\/jquery.min.js&quot;&gt;&lt;\/script&gt;\r\n&lt;script src=&quot;js\/jquery.flexslider.js&quot;&gt;&lt;\/script&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Next, we need to hook the 'flexslider' jQuery method to our div, which we do with the following code. Note that the Flexslider site recommends using (window).load() instead of (document).ready() to ensure that your images are ready when the script fires.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: xml\">\r\n&lt;script&gt;\r\n$(window).load(function() {\r\n    $(&quot;.flexslider&quot;).flexslider({\r\n        animation: &quot;slide&quot;, \r\n    });\r\n});\r\n&lt;\/script&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Two: Configure Advanced Custom Fields<\/h3>\r\n\r\n<p>Below is a screenshot of a field I created in ACF called \"Content Slider\", using the 'repeater' field type for <code>field_name<\/code> \"slide\".<\/p>\r\n\r\n<p class=\"note\"><strong>Note:<\/strong> I have removed some default options and helper text from the screenshot for simplicity.<\/p>\r\n\r\n<img src=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-content-slider-settings.jpg\" alt=\"advanced custom fields content slider settings\" width=\"460\" height=\"1192\" class=\"alignnone size-full wp-image-2825\" srcset=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-content-slider-settings.jpg 460w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-content-slider-settings-97x252.jpg 97w\" sizes=\"(max-width: 460px) 100vw, 460px\" \/>\r\n\r\n<p>Below is a screenshot of the three fields that are contained within the repeater field, expanded to show more options.<\/p>\r\n\r\n<p class=\"note\">I have again removed some of the defaults to simplify the screenshot.<\/p>\r\n\r\n<img src=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-repeater-settings.jpg\" alt=\"advanced custom fields repeater settings for slider\" width=\"460\" height=\"1373\" class=\"alignnone size-full wp-image-2826\" srcset=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-repeater-settings.jpg 460w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-repeater-settings-84x252.jpg 84w\" sizes=\"(max-width: 460px) 100vw, 460px\" \/>\r\n\r\n<h3>Step Three: Add your content<\/h3>\r\n\r\n<p>Once you have mapped the ACF field to the page on which you wish to display the slider, you will see the UI for the slider on the corresponding page edit screen. Below is an example screenshot of adding the content for one slide.<\/p>\r\n\r\n<img src=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-slide-content.jpg\" alt=\"advanced custom fields content slider with WordPress\" width=\"460\" height=\"595\" class=\"alignnone size-full wp-image-2831\" srcset=\"http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-slide-content.jpg 460w, http:\/\/astronautweb.co\/wp-content\/uploads\/2013\/05\/acf-slide-content-194x252.jpg 194w\" sizes=\"(max-width: 460px) 100vw, 460px\" \/>\r\n\r\n<p>Repeat the above for each slide you wish to display, then update the page to save the content. Now your ready to start coding the output for your slider.<\/p>\r\n\r\n<h3>Step Four: Output the ACF fields to your WordPress page<\/h3>\r\n\r\n<p>Start by retrieving the repeater field which contains your slide content.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n$rows = get_field('slide');\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Then use a <code>foreach<\/code> loop to access the fields within each iteration of the repeater. Below is a simplified version to demonstrate just the output of each field. This will allow us at check that the content we added in the above step is successfully being output to your page.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n&lt;?php \r\n\t$rows = get_field('slide');\r\n\tif($rows) {\r\n\t\tforeach($rows as $row) {\r\n\t\t\techo $row&amp;#91;'bg_image'&amp;#93;;\r\n\t\t\techo $row&amp;#91;'slide_heading'&amp;#93;;\r\n\t\t\techo $row&amp;#91;'slide_text'&amp;#93;;\r\n\t\t} \r\n\t}\r\n?&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Now we can add the structural components to the <code>foreach<\/code> loop:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: php\">\r\n&lt;div class=&quot;flexslider&quot;&gt;\r\n\t&lt;ul class=&quot;slides&quot;&gt;\r\n\t&lt;?php \r\n\t$rows = get_field('slide');\r\n\tif($rows) {\r\n\r\n\t\tforeach($rows as $row) {\r\n\t\t\t\/\/ retrieve size 'large' for background image \r\n\t\t\t$bgimg = $row&amp;#91;'bg_image'&amp;#93;&amp;#91;'sizes'&amp;#93;&amp;#91;'large'&amp;#93;;\r\n\r\n\t\t\t$output = &quot;&lt;li style='background-image: url(&quot;. $bgimg .&quot;);'&gt;\\n&quot;;\r\n\t\t\t$output .= &quot;  &lt;div class='slide-text'&gt;\\n&quot;;\r\n\t\t\t$output .= &quot;  &lt;h2&gt;&quot;. $row['slide_heading'] .&quot;&lt;\/h2&gt;\\n&quot;;\r\n\t\t\t$output .= &quot;  &quot; . $row['slide_text'];\r\n\t\t\t$output .= &quot;  &lt;\/div&gt;\\n&quot;;\r\n\t\t\t$output .= &quot;&lt;\/li&gt;\\r\\n\\n&quot;;\r\n\r\n\t\t\techo $output;\r\n\t\t} \r\n\t}\r\n\t?&gt;\r\n\t&lt;\/ul&gt;\r\n&lt;\/div&gt;\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Step Five: style the slider with CSS<\/h3>\r\n\r\n<p>This part depends on the specific needs of your design, however I will include the CSS I used in the demo page to complete this tutorial.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.flexslider {\r\n  width: 800px;\r\n  min-height: 368px;\r\n  margin-bottom: 80px;\r\n  border: 10px solid #ededed;\r\n  box-shadow: 0px 5px 6px -1px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n\/* the elliptical shadow below the slider *\/\r\n.flexslider:after {\r\n  content: '';\r\n  display: block;\r\n  width: 80%;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  z-index: -1;\r\n  bottom: -10px;\r\n  left: 10%;\r\n  box-shadow: 0 2px 10px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.slides li {\r\n  display: block;\r\n  width: 800px;\r\n  height: 368px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n\/* the text box *\/\r\n.slides li .slide-text {\r\n  position: relative;\r\n  background: #fff;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  top: 12px;\r\n  left: 17px;\r\n  width: 210px;\r\n  max-height: 316px;\r\n  overflow: hidden;\r\n  padding: 10px;\r\n  border: 4px solid #fff;\r\n  border-color: rgba(255, 255, 255, 0.5);\r\n  border-radius: 4px;\r\n}\r\n\r\n.slides li .slide-text h2 {\r\n  font-size: 24px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.flex-control-nav {\r\n  bottom: -60px;\r\n}\r\n.flex-control-nav li {\r\n  margin: 0 2px;\r\n}\r\n\r\n\/* the dots below the slider *\/\r\n.flex-control-paging li a {\r\n  background-color: #e9e9e9;\r\n  background-image: linear-gradient(to bottom, #f5f5f5, #d9d9d9); \/* add prefixed versions *\/\r\n  background-repeat: repeat-x;\r\n  box-shadow: inset 0 -1px 0 0 white, 0 1px 0 0 rgba(0, 0, 0, 0.1);\r\n  border: 1px solid #ededed;\r\n  height: 14px;\r\n  width: 14px;\r\n}\r\n.flex-control-paging li a.flex-active {\r\n  background: #ef3a34;\r\n  border-color: #ef3a34;\r\n  box-shadow: inset 0 -1px 0 0 rgba(255, 255, 255, 0.5), 0 1px 0 0 rgba(0, 0, 0, 0.25);\r\n}\r\n.flex-control-paging li a:hover {\r\n  background: #015697;\r\n  border-color: #015697;\r\n  box-shadow: inset 0 -1px 0 0 rgba(255, 255, 255, 0.5), 0 1px 0 0 rgba(0, 0, 0, 0.25);\r\n}\r\n<\/pre>\n      <\/div>\r\n","protected":false},"excerpt":{"rendered":"<p>A tutorial about how to create a slider with images and text content in WordPress [&#8230;]<\/p>\n","protected":false},"author":1,"featured_media":2833,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[16,155],"tags":[140,139,141,142,38],"_links":{"self":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2735"}],"collection":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2735"}],"version-history":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2735\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/2833"}],"wp:attachment":[{"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2735"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2735"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2735"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]