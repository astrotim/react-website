[
{
  "id": 3232,
  "date": "2017-05-02T21:58:29",
  "date_gmt": "2017-05-02T11:58:29",
  "guid": {
    "rendered": "http:\/\/astronautweb.co\/?p=3232"
  },
  "modified": "2017-05-02T22:01:36",
  "modified_gmt": "2017-05-02T12:01:36",
  "slug": "understanding-latency-web",
  "status": "publish",
  "type": "post",
  "link": "http:\/\/astronautweb.co\/understanding-latency-web\/",
  "title": {
    "rendered": "Understanding Latency on the Web"
  },
  "content": {
    "rendered": "<h3>Definition<\/h3>\r\n\r\n<p>Latency is the amount of time it takes for a server to receive and process a request for a page object, such as a file. The amount of latency depends largely on how far away the client is from the server.<\/p>\r\n\r\n<h3>TCP and Window Size<\/h3>\r\n\r\n<p>TCP, the protocol underpinning the web, uses a process called \"acknowledgement\" on the client to let the server know the transmission is going OK. TCP starts off with a slow connection speed, or \"window size\" and attempts to establish a reliable connection before transfer speed can increase. It gradually increases the window size for each transmission, with most modern browsers having a starting window size of 14kB.<\/p>\r\n\r\n<p>If the connection incurs any problems, like dropped packets or time outs, the window size decreases again, which effectively amounts to an extra round trip to establish a reliable connection again. Once the connection is established, multiple HTTP requests can be opened, but it is the initial connection which is affected most by latency, as multiple round trips may be necessary to establish transmission reliability.<\/p>\r\n\r\n<h3>First Paint and CDNs<\/h3>\r\n\r\n<p>This is why many performance articles cite 14kB as an initial performance budget for rendering the \"first paint\", because it can significantly impact perceived performance. Theoretically, light travelling in an optic fibre takes about 170ms to loop around the world. Once you account for delays between network interfaces between such connections, it explains why latency times can run into the hundreds of milliseconds. Hence <em>where<\/em> you host your code is the controlling factor. Using a CDN which serves your content from a geographically closer origin will not only reduce the time it takes for data to transmit from source to destination, it will also mitigate the impact of extra round trips incurred in establishing connection reliability.<\/p>\r\n",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Latency is the amount of time it takes for a round trip to a server [&#8230;]<\/p>\n",
    "protected": false
  },
  "author": 1,
  "featured_media": 0,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [167],
  "tags": [],
  "_links": {
    "self": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3232"
    }],
    "collection": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"
    }],
    "about": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"
    }],
    "author": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"
    }],
    "replies": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3232"
    }],
    "version-history": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3232\/revisions"
    }],
    "wp:attachment": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3232"
    }],
    "wp:term": [{
      "taxonomy": "category",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3232"
    }, {
      "taxonomy": "post_tag",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3232"
    }],
    "curies": [{
      "name": "wp",
      "href": "https:\/\/api.w.org\/{rel}",
      "templated": true
    }]
  }
},
{
  "id": 3203,
  "date": "2017-04-13T20:30:00",
  "date_gmt": "2017-04-13T10:30:00",
  "guid": {
    "rendered": "http:\/\/astronautweb.co\/?p=3203"
  },
  "modified": "2017-04-13T22:06:20",
  "modified_gmt": "2017-04-13T12:06:20",
  "slug": "javascript-lexical-scope",
  "status": "publish",
  "type": "post",
  "link": "http:\/\/astronautweb.co\/javascript-lexical-scope\/",
  "title": {
    "rendered": "What is Lexical Scope Anyway?"
  },
  "content": {
    "rendered": "<p>A relatively basic concept in JavaScript is that each declared function creates its own scope. What gets a little more mind bending is the concept of a closure - a function which is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<\/p>\r\n\r\n<p>Lexical scope is the scope model used by the JavaScript language, which differs to some other languages which use dynamic scope. Lexical scope is the scope defined at lexing time.<\/p>\r\n\r\n<h3>So, what is lexing time?<\/h3>\r\n<p>This digs into the mechanics of how JavaScript engine works. Despite commonly being referred to as an interpreted language, JavaScript compiles code immediately before executing it. For example the statement: <code>var a = 2;<\/code> is split into two separate steps at lexing time:<\/p>\r\n<ul>\r\n\t<li><code>var a<\/code> This declares the variable in the scope, before code execution.<\/li>\r\n\r\n\t<li><code>a = 2<\/code> This assigns the value 2 to the variable a, if it is found in the available scope.<\/li>\r\n<\/ul>\r\n\r\n<p>The lexing phase of compilation determines where and how all identifiers are declared, and thus how they will be looked up during execution. This is the same mechanism which results in \u201choisting\u201d variables. The variables are not actually moved within the source code, the declarations simply occur during the lexing phase and so the JavaScript engine is aware of these before execution.<\/p>\r\n\r\n<p>Consider these examples:<\/p>\r\n\r\n<p>Example 1:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nvar a = 1;\r\nconsole.log('a:', a); \/\/ a: 1\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 2:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nconsole.log('a:', a); \/\/ a: undefined\r\nvar a = 1;\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 3:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nconsole.log('a:', a); \/\/ Uncaught ReferenceError: a is not defined\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Example 1 is straightforward and works as expected, however note the subtle difference between other two examples. Example 2 logs that the value of a is undefined, but the identifier a has itself been declared; compared with example 3 in which the identifier a has not been declared, hence resulting in a reference error.<\/p>\r\n\r\n<p>This demonstrates that during the lexing phase, the JavaScript engine declares the variables first, before the following step in which the values are assigned to the identifiers - this is hoisting. Because functions are also defined at this time (lexing phase), we can say that lexical scope is based on where variables and blocks of scope exist at author time, and thus are locked down at the end of the lexing phase. Scope is not defined at runtime, rather it can be accessed at runtime.<\/p>\r\n\r\n<p>Again, a closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: js\">\r\nfunction foo() {  \/\/ 'scope of foo' aka lexical scope for bar\r\n   var memory = 'hello closure';\r\n   return function bar() {\r\n      console.log(memory);\r\n   }\r\n}\r\n\r\n\/\/ returns the bar function and assigns it to the identifier 'closure&rsquo;;\r\nconst closure = foo();\r\n\r\nclosure(); \/\/ hello closure\r\n<\/pre>\n      <\/div>\r\n\r\n<p>So\u2026 lexical scope is the author-time scope created by a closure. It is the \u2018outer\u2019 scope of a function which is defined inside a closure.<\/p>\r\n\r\n<blockquote style=\"max-width: 650px\">function scope of outer function === lexical scope of inner function.<\/blockquote>",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>A closure is a function which is able to remember and access its lexical scope [&#8230;]<\/p>\n",
    "protected": false
  },
  "author": 1,
  "featured_media": 0,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [166],
  "tags": [],
  "_links": {
    "self": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3203"
    }],
    "collection": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"
    }],
    "about": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"
    }],
    "author": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"
    }],
    "replies": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3203"
    }],
    "version-history": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3203\/revisions"
    }],
    "wp:attachment": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3203"
    }],
    "wp:term": [{
      "taxonomy": "category",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3203"
    }, {
      "taxonomy": "post_tag",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3203"
    }],
    "curies": [{
      "name": "wp",
      "href": "https:\/\/api.w.org\/{rel}",
      "templated": true
    }]
  }
},

{
  "id": 3177,
  "date": "2017-01-26T14:52:13",
  "date_gmt": "2017-01-26T03:52:13",
  "guid": {
    "rendered": "http:\/\/astronautweb.co\/?p=3177"
  },
  "modified": "2017-01-26T15:08:34",
  "modified_gmt": "2017-01-26T04:08:34",
  "slug": "writing-svg-can-sometimes-easy",
  "status": "publish",
  "type": "post",
  "link": "http:\/\/astronautweb.co\/writing-svg-can-sometimes-easy\/",
  "title": {
    "rendered": "Writing SVG can sometimes be easy"
  },
  "content": {
    "rendered": "<p>With the ubiquity of high density displays, SVG has gained much popularity in recent years for its resolution independent rendering of UI elements such as icons and logos. I have been using SVG for some time, always using a vector program like Illustrator or Sketch to manage the shapes and then export the code. The output is often an indecipherable stream of letters and numbers which would be insane to attempt to edit manually. Not all SVG shapes are complex vector paths, however. For some simple use cases, hand coding SVG is surprisingly simple.<\/p>\r\n\r\n<p>Getting your hands dirty with writing SVG manually is a really good way to understand exactly how the shapes are rendered to the screen, which then becomes useful for efficiently implementing design or interaction features such as animating shapes.<\/p>\r\n\r\n<p>In this article, I will cover the basics of writing SVG by hand,  with examples of how the shape and attribute syntax can output simple UI shapes.<\/p>\r\n\r\n<h2>Shape syntax<\/h2>\r\n\r\n<p>Let's begin by looking at the six main SVG shapes:<\/p>\r\n\r\n<ul>\r\n\t<li>line<\/li>\r\n\t<li>rect<\/li>\r\n\t<li>circle<\/li>\r\n\t<li>path<\/li>\r\n\t<li>polyline<\/li>\r\n\t<li>polygon<\/li>\r\n<\/ul>\r\n\r\n<h3>Line<\/h3>\r\n\r\n<p>This syntax translates to \"draw a line from x1,y1 to x2,y2\" with the following attributes:<\/p>\r\n\r\n<dl>\r\n\t<dt>x1<\/dt>\r\n\t<dd>starting X pos<\/dd>\r\n\t<dt>y1<\/dt>\r\n\t<dd>starting Y pos<\/dd>\r\n\t<dt>x2<\/dt>\r\n\t<dd>ending X pos<\/dd>\r\n\t<dt>y2<\/dt>\r\n\t<dd>ending Y pos<\/dd>\r\n<\/dl>\r\n\r\n<h4>Example<\/h4>\r\n\r\n<p><code>&lt;line x1=\"0\" y1=\"25\" x2=\"100\" y2=\"75\"&gt;<\/code><\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<line x1=\"0\" y1=\"25\" x2=\"100\" y2=\"75\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h3>Rect<\/h3>\r\n\r\n<dl>\r\n\t<dt>x<\/dt>\r\n\t<dd>top left X pos<\/dd>\r\n\t<dt>y<\/dt>\r\n\t<dd>top left Y pos<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;rect x=\"30\" y=\"10\" width=\"40\" height=\"80\"\/&gt;<\/code>\r\ntranslates to \"draw a 40x80 rectangle with top left corner at pos 30,10\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<rect x=\"30\" y=\"10\" width=\"40\" height=\"80\"\/>\r\n<\/svg>\r\n\r\n<h2>Circle<\/h2>\r\n\r\n<dl>\r\n\t<dt>r<\/dt>\r\n\t<dd>radius<\/dd>\r\n\t<dt>cx<\/dt>\r\n\t<dd>centre X pos<\/dd>\r\n\t<dt>cy<\/dt>\r\n\t<dd>centre Y pos<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;circle r=\"50\" cx=\"50\" cy=\"50\"\/&gt;<\/code>\r\ntranslates to \"draw a circle of radius 50 with the centre at pos 50,50\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Path<\/h2>\r\n\r\n<dl>\r\n\t<dt>M<\/dt>\r\n\t<dd>move to<\/dd>\r\n\t<dt>H<\/dt>\r\n\t<dd>draw a horizontal line<\/dd>\r\n\t<dt>V<\/dt>\r\n\t<dd>draw a vertical line<\/dd>\r\n\t<dt>Z<\/dt>\r\n\t<dd>close the path<\/dd>\r\n<\/dl>\r\n\r\n<p><code>&lt;path d=\"M10 10 H 90 V 90 Z\"&gt;<\/code> translates to \"move to position 10,10; draw a horizontal line to pos 90,10; draw a vertical line to pos 90,90; draw a horizontal line to pos 10,90; close the path back to the starting point\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<path d=\"M10 10 H 90 V 90 Z\" stroke=\"black\" fill=\"transparent\"><\/path>\r\n<\/svg>\r\n\r\n<h2>Polyline<\/h2>\r\n\r\n<p><strong>points<\/strong> a list of X,Y positions<\/p>\r\n\r\n<p><code>&lt;polyline points=\"0 80, 20 20, 40 80, 50 5, 60 100, 80 50, 100 50\"\/&gt;<\/code> translates to \"draw connected lines between the points\".<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<polyline points=\"0 80, 20 20, 40 80, 50 5, 60 100, 80 50, 100 50\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Polygon<\/h2>\r\n\r\n<p>Same as polyline, with the path automatically closing to the first position.<\/p>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"10rem\">\r\n\t<polygon points=\"0 80, 20 20, 60 100, 100 30\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n\r\n<h2>Attributes<\/h2>\r\n\r\n<p><code>viewBox<\/code> is the 'artboard' of the SVG file. A viewBox value of \"0 0 100 100\" translates to a 100x100 artboard with a top left position of 0,0.<\/p>\r\n\r\n<p><code>fill<\/code> sets the background colour and <code>stroke<\/code> sets the border colour of the shape.<\/p>\r\n\r\n<p><code>preserveAspectRatio=\"none\"<\/code> disables the default behaviour of an SVG maintaining the viewBox proportions when resized. This is useful for shapes that stretch in one dimension, such as a line.<\/p>\r\n\r\n<p><code>width<\/code> and <code>height<\/code> are optional attributes for defining size. It is useful to set a width to prevent an SVG from rendering full screen in the absence of CSS. Unlike the inline <code>style<\/code> attribute, these styles have very low specificity and can be easily overridden with CSS.<\/p>\r\n\r\n<p><code>&lt;use&gt;<\/code> is a child element for referencing an SVG defined elsewhere.<\/p>\r\n\r\n<p><code>xmlns=\"http:\/\/www.w3.org\/2000\/svg\"<\/code>  defines the XML namespace. This only necessary for SVG files and optional for inline SVG.<\/p>\r\n\r\n\r\n<h2>Common shapes<\/h2>\r\n\r\n<h3>Chevron<\/h3>\r\n\r\n<svg viewBox=\"0 0 50 100\" height=\"10rem\">\r\n\t<polyline points=\"0 0, 50 50, 0 100\" fill=\"none\" stroke=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Tooltip arrow<\/h3>\r\n\r\n<svg viewBox=\"0 0 100 50\" width=\"2rem\">\r\n\t<polygon points=\"0 0, 50 50, 100 0\" fill=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Decorative line<\/h3>\r\n\r\n<h4 class=\"title\">\r\n\t<svg viewBox=\"0 0 100 1\" preserveAspectRatio=\"none\">\r\n\t\t<line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"0\" fill=\"black\" stroke=\"black\" \/>\r\n\t<\/svg>\r\n\t<span>Some Text<\/span>\r\n\t<svg viewBox=\"0 0 100 1\" preserveAspectRatio=\"none\">\r\n\t\t<line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"0\" fill=\"black\" stroke=\"black\" \/>\r\n\t<\/svg>\r\n<\/h4>\r\n\r\n<h3>Arrow<\/h3>\r\n\r\n<svg viewBox=\"0 0 100 80\" width=\"10rem\">\r\n\t<polygon points=\"0 20,60 20,60 0,100 40,60 80,60 60,0 60\" fill=\"black\" \/>\r\n<\/svg>\r\n\r\n<h3>Pie chart<\/h3>\r\n\r\n<p><code>&lt;circle r=\"16\" cx=\"16\" cy=\"16\"&gt;<\/code><\/p>\r\n\r\n<svg viewBox=\"0 0 32 32\" class=\"pie\" width=\"10rem\">\r\n\t<circle r=\"16\" cx=\"16\" cy=\"16\"\/>\r\n<\/svg>\r\n\r\n<h3>Curves<\/h3>\r\n\r\n<h4>Cubic bezier (C)<\/h4>\r\n\r\n<svg viewBox=\"0 0 60 30\" width=\"190\">\r\n\t<path d=\"M10 10 C 20 20, 40 20, 50 10\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<br \/>\r\n\r\n<svg width=\"190\" height=\"160\">\r\n  <path d=\"M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<h4>Quadratic bezier (Q)<\/h4>\r\n\r\n<svg width=\"190\" height=\"160\">\r\n  <path d=\"M10 80 Q 95 10 180 80\" stroke=\"black\" fill=\"transparent\"\/>\r\n<\/svg>\r\n\r\n<h2>Border image<\/h2>\r\n\r\n<p>Using SVG as a border image can allow for some visual effects that are difficult or impossible with the <code>border<\/code> or <code>box-shadow<\/code> properties, such as positioning a border on the center of a bounding box, rather than inside (border) or outside (box-shadow).<\/p>\r\n\r\n<div class=\"boxes\">\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n\t<div class=\"box\"><\/div>\r\n<\/div>\r\n\r\n<h2>Animating SVG<\/h2>\r\n\r\n<button id=\"animate\">Animate stuff<\/button>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 300 1\" width=\"30rem\" preserveAspectRatio=\"none\" class=\"animated-line\">\r\n\t<line x1=\"0\" y1=\"0\" x2=\"300\" y2=\"0\" fill=\"none\" stroke=\"black\"\/>\r\n<\/svg>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 10 20\" width=\"1rem\" class=\"animated-chevron\">\r\n\t<path d=\"M0 0, L10 10, L0 20\" fill=\"none\" stroke=\"black\" \/>\r\n<\/svg>\r\n<br \/><br \/>\r\n\r\n<svg viewBox=\"0 0 32 32\" class=\"pie animated-pie\" width=\"10rem\">\r\n\t<circle r=\"16\" cx=\"16\" cy=\"16\"\/>\r\n<\/svg>\r\n\r\n<style>\r\nsvg {\r\n  box-shadow: 0 0 0 1px rgba(199, 37, 78, 0.25);\r\n}\r\n\r\ncode {\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\ndl {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n}\r\n\r\ndt {\r\n  -ms-flex-preferred-size: 2.5rem;\r\n      flex-basis: 2.5rem;\r\n}\r\n\r\ndd {\r\n  -ms-flex-preferred-size: calc(100% - 2.5rem);\r\n      flex-basis: calc(100% - 2.5rem);\r\n}\r\n\r\n.title {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n}\r\n.title span {\r\n  padding: 0 .5rem;\r\n  white-space: nowrap;\r\n}\r\n.title svg {\r\n  width: 100%;\r\n  height: 1px;\r\n  box-shadow: none;\r\n}\r\n\r\n.pie {\r\n  background-color: aliceblue;\r\n  border-radius: 50%;\r\n  -webkit-transform: rotate(-90deg);\r\n          transform: rotate(-90deg);\r\n}\r\n.pie circle {\r\n  fill: none;\r\n  stroke: hotpink;\r\n  stroke-width: 32;\r\n  stroke-dasharray: 30 201;\r\n  -webkit-transition: all .2s ease-out;\r\n  transition: all .2s ease-out;\r\n}\r\n\r\n.animated-pie.-hide circle {\r\n  stroke-dasharray: 0 201;\r\n}\r\n\r\n.boxes {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n      flex-wrap: wrap;\r\n  max-width: 150px;\r\n}\r\n\r\n.box {\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid transparent;\r\n  border-image-source: url(\"data:image\/svg+xml,%3Csvg xmlns%3D'http:\/\/www.w3.org\/2000\/svg' width%3D'3' height%3D'3' fill%3D'%23BFC0BF'%3E%3Crect x%3D'0' y%3D'0' width%3D'3' height%3D'3' \/%3E%3C\/svg%3E\");\r\n  border-image-slice: 1 1;\r\n  border-image-outset: .5;\r\n}\r\n\r\n.animated-chevron {\r\n  box-shadow: none;\r\n  display: inline-block;\r\n  width: 4rem;\r\n  stroke-width: -1px;\r\n  stroke-dasharray: 28.284, 20;\r\n  stroke-dashoffset: 0;\r\n  -webkit-transition: all .2s;\r\n  transition: all .2s;\r\n}\r\n\r\n.animated-chevron.-hide {\r\n  stroke-dasharray: 0, 20;\r\n  stroke-dashoffset: -13.642;\r\n}\r\n\r\n.animated-line {\r\n  box-shadow: none;\r\n  -webkit-transition: width .2s ease-out;\r\n  transition: width .2s ease-out;\r\n  width: 100%;\r\n  height: 1px;\r\n}\r\n.animated-line.-hide {\r\n  width: 0;\r\n}\r\n\r\n.animated-pie {\r\n  box-shadow: none;\r\n}\r\n.animated-pie circle {\r\n  stroke: #666;\r\n}\r\n<\/style>\r\n\r\n<script>\r\ndocument.getElementById('animate').addEventListener('click', function() {\r\n\tdocument.querySelector('.animated-chevron').classList.toggle('-hide');\r\n\tdocument.querySelector('.animated-line').classList.toggle('-hide');\r\n\tdocument.querySelector('.animated-pie').classList.toggle('-hide');\r\n});\r\n\r\ndocument.querySelector('.animated-line').addEventListener('click', function() {\r\n});\r\n<\/script>\r\n\r\n\r\n\r\n",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Hand coding SVG is a good way to understand exactly how shapes are rendered to [&#8230;]<\/p>\n",
    "protected": false
  },
  "author": 1,
  "featured_media": 0,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [16],
  "tags": [],
  "_links": {
    "self": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3177"
    }],
    "collection": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"
    }],
    "about": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"
    }],
    "author": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"
    }],
    "replies": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3177"
    }],
    "version-history": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3177\/revisions"
    }],
    "wp:attachment": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3177"
    }],
    "wp:term": [{
      "taxonomy": "category",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3177"
    }, {
      "taxonomy": "post_tag",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3177"
    }],
    "curies": [{
      "name": "wp",
      "href": "https:\/\/api.w.org\/{rel}",
      "templated": true
    }]
  }
},
{
  "id": 3035,
  "date": "2014-02-11T22:43:48",
  "date_gmt": "2014-02-11T11:43:48",
  "guid": {
    "rendered": "http:\/\/astronautweb.co\/?p=3035"
  },
  "modified": "2014-06-05T11:49:50",
  "modified_gmt": "2014-06-05T01:49:50",
  "slug": "learning-javascript-future-of-the-web",
  "status": "publish",
  "type": "post",
  "link": "http:\/\/astronautweb.co\/learning-javascript-future-of-the-web\/",
  "title": {
    "rendered": "Betting My Future on JavaScript"
  },
  "content": {
    "rendered": "<h3>Learning web development: an eternal work in progress<\/h3>\r\n\r\n<p>I remember using JavaScript years ago to hack together a random image box. It was a copy\/paste effort of cryptic nonsense but magically it worked. I was terrified of it and in no hurry to go back for more. HTML and CSS were fast becoming my best friends and I felt no need to disturb the peace with all this <code>var<\/code> weirdness.<\/p>\r\n\r\n<p>Then along came <a href=\"http:\/\/jquery.com\">jQuery<\/a> and websites en masse started to <code>slideDown<\/code>, <code>fadeOut <\/code>and <code>ajax<\/code> all kinds of coolness. Like many others, I learned enough to be dangerous without needing to dirty my hands with <em>real<\/em> JavaScript.<\/p>\r\n\r\n<p>These days, we have ourselves a new <strong>.js<\/strong> on the block just about every day. JavaScript is no longer only an interactivity layer for websites, it is what makes <a href=\"http:\/\/www.html5rocks.com\/en\/\">HTML5 a buzz word<\/a>, it is a server, it is a new framework each week and showing no signs of slowing down. jQuery is now a mature version 2.1 and used on <a href=\"http:\/\/w3techs.com\/technologies\/details\/js-jquery\/all\/all\">57.7% of all websites<\/a>, with the minimalist alternative, <a href=\"http:\/\/zeptojs.com\/\">Zepto.js<\/a>, following in its footsteps.<\/p>\r\n\r\n<p>It's now time to get out of my CSS comfort zone and invest in the future. After hearing about <a href=\"http:\/\/nodejs.org\/\">Node.js<\/a> for the past few years, I've now installed it on my two development machines, so I can now run a local web server without starting up Apache. I don't understand the first thing about Node, but I can now use it to compile my Sass and vendor prefix my production CSS, courtesy of task runner <a href=\"http:\/\/gruntjs.com\/\">Grunt.js<\/a>.<\/p>\r\n\r\n<p>I've starting experimenting with JS frameworks <a href=\"http:\/\/backbonejs.org\/\">Backbone.js<\/a> and <a href=\"http:\/\/angularjs.org\/\">Angular.js<\/a> which make PHP seem tired and old. <\/p> \r\n\r\n<p>XML always seemed nerdy and overcomplicated, but this is rapidly being superseded by JSON format, which has even found its way into my desktop code editor, <a href=\"http:\/\/www.sublimetext.com\/2\">Sublime Text 2<\/a> as the standard format for all configuration files. To render your JSON data, you've to choose from the many templating engines: <a href=\"http:\/\/handlebarsjs.com\/\">Handlebars<\/a>, <a href=\"http:\/\/underscorejs.org\/\">Underscore.js<\/a>, or for added performance: <a href=\"http:\/\/lodash.com\/\">Lo-Dash<\/a>.<\/p>\r\n\r\n<p>JavaScript is absolutely everywhere, and it won't be long until my Mum has heard of it. It is high time I started to <a href=\"http:\/\/jstherightway.org\/\">Learn JavaScript the Right Way<\/a> from the many online resources such as <a href=\"http:\/\/teamtreehouse.com\/library\/javascript-foundations\">Treehouse<\/a>, <a href=\"http:\/\/www.lynda.com\/JavaScript-tutorials\/practical-and-effective-javascript\/781-2.html\">Lynda.com<\/a> and <a href=\"http:\/\/www.codecademy.com\/tracks\/javascript\">Codeacademy<\/a> and the book, <a href=\"http:\/\/www.amazon.com\/JavaScript-Good-Parts-Douglas-Crockford\/dp\/0596517742\">JavaScript: the Good Parts<\/a><\/p>\r\n\r\n<h3>Code Snippets<\/h3>\r\n\r\n<ul>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/ajax-101\/\">Ajax 101<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-anonymous-function\/\">Self-invoking anonymous function<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-smooth-scrolling\/\" title=\"jQuery Smooth Scrolling\">jQuery Smooth Scrolling<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/ajax-jquery\/\" title=\"Ajax using jQuery\">Ajax with jQuery<\/a><\/li>\r\n\t<li><a href=\"http:\/\/astronautweb.co\/snippet\/jquery-javascript-comparison\/\" title=\"jQuery to Native JavaScript comparison\">jQuery to JavaScript Code Comparison<\/a><\/li>\r\n<\/ul>\r\n\r\n<h3>Reading List<\/h3>\r\n<ul>\r\n\t<li><a href=\"https:\/\/todaymade.com\/blog\/future-of-javascript\/\">The Future Of The World Is JavaScript<\/a><\/li>\r\n\t<li><a href=\"http:\/\/jstherightway.org\/\">JavaScript The Right Way<\/a><\/li>\r\n\t<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Introduction_to_Object-Oriented_JavaScript\">Introduction to Object-Oriented JavaScript<\/a><\/li>\r\n\t<li><a href=\"https:\/\/github.com\/rwaldron\/idiomatic.js\/\">Principles of Writing Consistent, Idiomatic JavaScript<\/a><\/li>\r\n\t<li><a href=\"http:\/\/toddmotto.com\/avoiding-anonymous-javascript-functions\/\">Avoiding anonymous JavaScript functions<\/a><\/li>\r\n<\/ul>\r\n\r\n<hr>",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Learning web development: an eternal work in progress I remember using JavaScript years ago to [&#8230;]<\/p>\n",
    "protected": false
  },
  "author": 1,
  "featured_media": 3043,
  "comment_status": "closed",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [152],
  "tags": [165],
  "_links": {
    "self": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3035"
    }],
    "collection": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"
    }],
    "about": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"
    }],
    "author": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"
    }],
    "replies": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=3035"
    }],
    "version-history": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/3035\/revisions"
    }],
    "wp:featuredmedia": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/3043"
    }],
    "wp:attachment": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=3035"
    }],
    "wp:term": [{
      "taxonomy": "category",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=3035"
    }, {
      "taxonomy": "post_tag",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=3035"
    }],
    "curies": [{
      "name": "wp",
      "href": "https:\/\/api.w.org\/{rel}",
      "templated": true
    }]
  }
},
{
  "id": 2995,
  "date": "2014-01-04T23:40:25",
  "date_gmt": "2014-01-04T12:40:25",
  "guid": {
    "rendered": "http:\/\/astronautweb.co\/?p=2995"
  },
  "modified": "2014-01-05T08:59:12",
  "modified_gmt": "2014-01-04T21:59:12",
  "slug": "sass-web-development",
  "status": "publish",
  "type": "post",
  "link": "http:\/\/astronautweb.co\/sass-web-development\/",
  "title": {
    "rendered": "7 Reasons to Use Sass"
  },
  "content": {
    "rendered": "<p>If you're not already on the <a href=\"http:\/\/sass-lang.com\/\" target=\"_blank\">Sass<\/a> bandwagon, here's seven reasons to help you make the transition.<\/p>\r\n\r\n<h3>Partial Files<\/h3>\r\n\r\n<p>Really long CSS files are painful. Before Sass, I used to try to devise ways to make it easier to jump around a CSS file, and I even used @import to pull in other CSS files, which is a performance no-no. Undoubtedly, the first feature of Sass to make my life easier is the use of partial files. By simply prepending a file name with an underscore, eg: <code>_header.scss<\/code>, and referencing the partial in your primary scss file, Sass will compile it into the primary css file without compiling it to an individual CSS file.<p>\r\n\r\n<p>Now we can break down our CSS into focused files to simplify code management with the comfort of knowing it will all compile into a single CSS file for the browser.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n\/\/ the following partials will compile into one CSS file\r\n@import 'globals';\r\n@import 'type';\r\n@import 'images';\r\n@import 'header';\r\n@import 'nav';\r\n@import 'page';\r\n@import 'footer';\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Nesting<\/h3>\r\n\r\n<p>If we're not careful, CSS can easily get out of hand with long selectors, especially when targeting multiple elements or classes inside a parent element. Sass allows us to nest selectors inside others, much like the nested structure of HTML, to make our code more readable and easier to maintain.<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.parent {\r\n  display: block;\r\n\r\n  .child {\r\n    color: #fff;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Nesting vastly simplifies writing pseudo selectors by using the <code>&amp;<\/code> character to concatenate parent and pseudo selector, like:\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\na {\r\n  color: #369;\r\n  text-decoration: none;\r\n\r\n  &amp;:hover {\r\n    color: #666; \r\n    text-decoration: underline;\r\n  }\r\n\r\n  &amp;:active {\r\n    outline: 0;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Nested Media Queries<\/h3>\r\n\r\n<p>Similarly, the management of rules targeted by media queries is vastly simplified with use of nested media queries. Once upon a time, I would have all the media queries one of more partial files, which invited the opportunity for human error.<p>\r\n\r\n<p>Now we can drop in our responsive styles right where it makes most sense, like this:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.box {\r\n  width: 33%;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    width: 100%;\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<h3>Variables<\/h3>\r\n\r\n<p>The most obvious use of variables in Sass is for color management. By using <code>$light-blue<\/code> in our code, which references a predefined value like <code>$light-blue: #176BEC;<\/code>, it allows us to fine tune the color palette without needing to reach for the find &amp; replace command.<\/p>\r\n\r\n<p>Variables become exponentially more useful when combined with other Sass functions like <code>lighten($light-blue, 10%)<\/code> or math functions applied to numeric variables; for example calculating a ratio: <code>percentage($width\/$height);<\/code><\/p>\r\n\r\n<h3>Minification<\/h3>\r\n\r\n<p>When it's time for pushing our CSS to a production site, Sass will minify the code with a simple config option, removing all comments and whitespace. Now there's no excuse for having multiple bloated CSS files on a website, we combine all the partials into a single, minified CSS file.<\/p>\r\n\r\n<h3>The Bourbon Mixin Library<\/h3>\r\n\r\n<p>Mixins are awesome, but I'm going to skip right over the part about writing your own custom mixins and say that what is way more excellent is an extensive collection of mixins created by people much smarter than me.<\/p>\r\n\r\n<p><a href=\"http:\/\/bourbon.io\/\" target=\"_blank\">Bourbon<\/a> is wonderful Sass mixin library which I use on every project. Since Sass only compiles what I use, there is no performance concern about including a library of code that I may or may not use, unlike jQuery for example. Bourbon takes all the pain out of writing vendor prefixed code, such as a keyframe animation like:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@include keyframes(slideOpen) {\r\n  from {\r\n    @include transform(translateX(0));\r\n  }\r\n  to {\r\n    @include transform(translateX(240px));\r\n  }\r\n}\r\n<\/pre>\n      <\/div>\r\n\r\n<p>The Bourbon docs are excellent, so take a look at all the other handy shortcuts it has to offer.<\/p> \r\n\r\n<h3>Bootstrap Sass<\/h3>\r\n\r\n<p>I couldn't write an article about CSS without mentioning Bootstrap. Although it is originally written in LESS, there are many ports of Bootstrap into Sass, such <a href=\"https:\/\/github.com\/twbs\/bootstrap-sass\">this one<\/a>. Much like Bourbon, we can include the Sass version of Bootstrap in our project to make all the mixins and partial files available. Rarely is there a need to use the entire Bootstrap framework, so instead we can call upon just the components we want to use, for example we can use just the typography and button styles like so:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n@import 'bootstrap\/variables';\r\n@import 'bootstrap\/mixins';\r\n@import 'bootstrap\/type';\r\n@import 'bootstrap\/buttons';\r\n<\/pre>\n      <\/div>\r\n\r\n<p>Alternatively, we can use the <code>@extend<\/code> directive to use Bootstrap styles with our own selectors, like:<\/p>\r\n\r\n<div class=\"code-snippet\">\n      <pre class=\"brush: css\">\r\n.custom-button {\r\n  @extend .btn;\r\n  border-radius: 0;\r\n  border-width: 0 0 3px 0;\r\n}\r\n<\/pre>\n      <\/div>",
    "protected": false
  },
  "excerpt": {
    "rendered": "<p>Sass is a total game changer for CSS development. It not only simplifies the code [&#8230;]<\/p>\n",
    "protected": false
  },
  "author": 1,
  "featured_media": 3001,
  "comment_status": "open",
  "ping_status": "open",
  "sticky": false,
  "template": "",
  "format": "standard",
  "meta": [],
  "categories": [164],
  "tags": [149, 150],
  "_links": {
    "self": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2995"
    }],
    "collection": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts"
    }],
    "about": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/types\/post"
    }],
    "author": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/users\/1"
    }],
    "replies": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/comments?post=2995"
    }],
    "version-history": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/posts\/2995\/revisions"
    }],
    "wp:featuredmedia": [{
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media\/3001"
    }],
    "wp:attachment": [{
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/media?parent=2995"
    }],
    "wp:term": [{
      "taxonomy": "category",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/categories?post=2995"
    }, {
      "taxonomy": "post_tag",
      "embeddable": true,
      "href": "http:\/\/astronautweb.co\/wp-json\/wp\/v2\/tags?post=2995"
    }],
    "curies": [{
      "name": "wp",
      "href": "https:\/\/api.w.org\/{rel}",
      "templated": true
    }]
  }
}

]
